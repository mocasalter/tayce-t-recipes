/* base */
/*! normalize.scss v0.1.0 | MIT License | based on git.io/normalize */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block; }

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */ }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none; }

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0; }

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden; }

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto; }

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em; }

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal; }

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto; }

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto; }

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold; }

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

td,
th {
  padding: 0; }

html {
  font-size: 50%;
  box-sizing: border-box; }
  @media (min-width: 500px) {
    html {
      font-size: 62.5%; } }

*, *:after, *:before {
  box-sizing: inherit; }

body {
  background: #F9EACA;
  font-family: "Open Sans", sans-serif;
  font-size: 1.6rem;
  color: #46321D;
  line-height: 1.6; }

.container {
  max-width: 100%;
  width: 750px;
  margin: 0 auto;
  padding: 0 2rem; }

.header {
  margin-top: 6rem; }

.logo {
  display: inline-block; }
  .logo > svg {
    display: block;
    max-width: 100%;
    height: auto; }

.main {
  margin-bottom: 14rem; }

.footer {
  background: #46321D;
  padding: 2rem 0 1.5rem;
  color: #B8A299; }
  .footer a {
    text-decoration: none;
    color: #B8A299; }
    .footer a:hover, .footer a:focus {
      text-decoration: underline; }

.footer-content {
  display: flex;
  align-items: center;
  justify-content: space-between; }

@media (min-width: 500px) {
  .main {
    min-height: calc(100vh - 275px); }
  .main--home {
    min-height: calc(100vh - 940px); } }

/* inspired by https://codepen.io/finnhvman/pen/MQyJxV/ */
.button {
  line-height: 1;
  font-size: 2.3rem;
  font-family: "Indie Flower", cursive;
  display: inline-block;
  border-radius: 3px;
  text-decoration: none;
  padding: 1rem 1.7rem;
  color: #000;
  border: 2px solid #000;
  border-top: none;
  border-left: none;
  transition: box-shadow 100ms ease-out; }
  .button:hover, .button:focus {
    box-shadow: 1px 1px 0 #000; }
  .button:active {
    box-shadow: 2px 2px 0 #000; }

/* types of buttons */
.button {
  background: #fff568; }
  .button:hover, .button:focus {
    background: #fff78d; }

.un-button {
  line-height: 1;
  font-size: 2.3rem;
  font-family: "Indie Flower", cursive;
  border: none;
  background: transparent;
  padding: 0;
  display: inline;
  border: none;
  text-decoration: underline;
  font-size: 2.3rem; }
  .un-button:hover, .un-button:focus {
    text-decoration: none; }

/* modifiers */
.button--important {
  background: #FFA33E; }
  .button--important:hover, .button--important:focus {
    background: #ffb260; }

.button--danger {
  background: #DF3034;
  color: #fff; }
  .button--danger:hover, .button--danger:focus {
    background: #eb4548; }

.button--large {
  padding: 1.3rem 2.1rem;
  font-size: 3rem; }

.un-button--danger {
  color: #DF3034; }
  .un-button--danger:hover, .un-button--danger:focus {
    color: #eb4548; }

a {
  color: #46321D; }
  a:hover, a:focus {
    text-decoration: none; }

.reverse-link-underline {
  text-decoration: none; }
  .reverse-link-underline:hover, .reverse-link-underline:focus {
    text-decoration: underline; }

.link-list {
  padding: 0;
  margin: 0;
  list-style: none;
  display: inline; }
  .link-list > li {
    display: inline;
    position: relative; }
  .link-list li + li:before {
    content: '| '; }

h1, h2, h3, h4, h5, h6 {
  color: #46321D; }

h1, h2, h3 {
  font-family: "Indie Flower", cursive;
  font-weight: 400;
  line-height: 1;
  margin: 6rem 0 1.5rem; }

h4, h5, h6 {
  font-weight: 700;
  text-transform: uppercase;
  margin: 1.5rem 0; }

h1 {
  font-size: 4.7rem; }

h2 {
  font-size: 4rem; }

h3 {
  font-size: 3.7rem; }

p {
  margin: 1.5rem 0; }

.text-center {
  text-align: center; }

.title-bigger {
  font-size: 5rem; }

.novelty-body-text {
  font-size: 3rem;
  text-transform: initial;
  font-family: "Indie Flower", cursive;
  line-height: 1; }

.plus-one-spacer {
  display: inline-block;
  width: 0.3rem; }

/* forms */
.form-item {
  margin: 6rem 0 0; }

.form-item-short {
  margin: 3rem 0 0; }

/* labels */
.form-item > label {
  display: block;
  font-size: 2.4rem;
  text-transform: uppercase;
  font-family: "Indie Flower", cursive;
  line-height: 1; }

.form-item__text {
  margin-bottom: 2rem; }

/* fields */
input[type="text"], textarea {
  background: #fcf5e3;
  font-size: 3rem;
  text-transform: initial;
  font-family: "Indie Flower", cursive;
  line-height: 1;
  color: #46321D;
  width: 100%;
  padding: 0;
  padding: 1.5rem;
  border: none;
  border-bottom: 2px solid #000;
  border-radius: 3px;
  transition: all 100ms ease-out; }
  input[type="text"]:hover, textarea:hover, input[type="text"]:focus, textarea:focus {
    background: #fefaf1; }

input[type="text"] {
  height: 4.7rem;
  padding-top: calc(1.5rem + 4px);
  padding-bottom: calc(1.5rem - 4px); }

/* groupings */
.field-button-stack {
  text-align: right; }
  .field-button-stack > input {
    margin-bottom: 2rem; }

/* placeholder */
::-webkit-input-placeholder {
  /* Chrome/Opera/Safari */
  color: #9E8674; }

::-moz-placeholder {
  /* Firefox 19+ */
  color: #9E8674; }

:-ms-input-placeholder {
  /* IE 10+ */
  color: #9E8674; }

:-moz-placeholder {
  /* Firefox 18- */
  color: #9E8674; }

.select-wrap {
  background-color: #fcf5e3;
  padding: 0;
  display: inline-block;
  position: relative;
  z-index: 1; }
  .select-wrap select {
    cursor: pointer;
    box-shadow: none;
    background: transparent;
    width: 100%;
    font-size: 3rem;
    text-transform: initial;
    font-family: "Indie Flower", cursive;
    line-height: 1;
    height: 4.8rem;
    padding: 0 calc((12px*2)  + (1.5rem*2)) 0 1.5rem;
    border-radius: 3px;
    border: 2px solid #000;
    -webkit-appearance: none;
    -moz-appearance: none; }
  .select-wrap:before {
    content: '';
    display: block;
    z-index: -1;
    position: absolute;
    top: 50%;
    right: 1.5rem;
    margin-top: -7.5px;
    pointer-events: none;
    border-top: 15px solid #46321D;
    border-left: 12px solid transparent;
    border-right: 12px solid transparent; }
  .select-wrap:after {
    content: '';
    display: block;
    z-index: -2;
    position: absolute;
    top: 0;
    right: 0;
    width: calc((24px) + (3rem));
    height: 100%;
    background: #fcf5e3;
    pointer-events: none;
    border-radius: 3px; }
  .select-wrap:hover, .select-wrap:focus {
    background: #fefaf1; }
    .select-wrap:hover:after, .select-wrap:focus:after {
      background: #fefaf1; }

/* Firefox fix */
:-moz-any(.select-wrap):before {
  pointer-events: none;
  z-index: 1; }

:-moz-any(.select-wrap):after {
  z-index: 0;
  height: calc(4.8rem - 4px);
  right: 2px;
  top: 2px; }

/* IE 10+ fix */
@media screen and (-ms-high-contrast: active), (-ms-high-contrast: none) {
  .select-wrap select::-ms-expand {
    display: none; } }

.checkbox-label {
  display: block;
  position: relative;
  padding-left: 4.5rem;
  cursor: pointer; }

.checkbox-label input {
  height: 1px !important;
  width: 1px !important;
  opacity: 0; }

.checkbox-label .outer {
  display: inline-block;
  position: absolute;
  left: 0;
  top: calc(50% - 0.1rem);
  width: 3rem;
  height: 3rem;
  border: 2px solid #000;
  background: #fcf5e3;
  border-radius: 3px;
  transform: translateY(-50%); }
  .checkbox-label .outer:hover, .checkbox-label .outer:focus {
    background: #fefaf1; }

.checkbox-label .inner {
  position: absolute;
  transform: rotate(56deg) skew(16deg) scale(0.6);
  display: inline-block;
  height: 2.2rem;
  width: 1rem;
  left: 0.8rem;
  top: 0px;
  border: 0.3rem solid #46321D;
  border-top: none;
  border-left: none;
  opacity: 0;
  transition: transform 100ms, opacity 100ms; }

.checkbox-label input:checked + .outer .inner {
  transform: rotate(56deg) skew(16deg) scale(1);
  opacity: 1; }

.search-wrapper {
  position: relative;
  margin: 6.5rem auto 8rem; }
  .search-wrapper img {
    position: absolute;
    top: 50%;
    left: 11px;
    transform: translateY(-50%); }
  .search-wrapper input {
    padding-left: 58px;
    /* image size + some extra*/
    background: transparent; }
    .search-wrapper input:hover, .search-wrapper input:focus {
      background: #fcf3e1; }

#search:focus + img {
  animation: boing 500ms ease; }

@keyframes boing {
  from {
    transform: translateY(-50%) scale(1); }
  40% {
    transform: translateY(-50%) scale(1.1); }
  to {
    transform: translateY(-50%) scale(1); } }

body:not(.user-is-tabbing) button:focus,
body:not(.user-is-tabbing) input:focus,
body:not(.user-is-tabbing) select:focus,
body:not(.user-is-tabbing) textarea:focus {
  outline: none; }

body.user-is-tabbing button:focus,
body.user-is-tabbing input:focus,
body.user-is-tabbing select:focus,
body.user-is-tabbing textarea:focus {
  outline-color: #FFA33E; }

/* objects */
.media-block img {
  margin: 1.5rem 0 0 0; }

.media-block > div {
  margin-top: 1.5rem; }
  .media-block > div > *:first-child {
    margin-top: 0; }
  .media-block > div > *:last-child {
    margin-bottom: 0; }

.media-block h2 {
  margin: 0;
  line-height: 1; }

.media-block p:first-of-type {
  margin-top: 1rem; }

.media-block p:last-of-type {
  margin-bottom: 3rem; }

@media (min-width: 500px) {
  .media-block {
    display: flex;
    align-items: flex-start; }
  .media-block img {
    margin: 0 3rem 0 0; }
  .media-block > div {
    flex: 1;
    margin-top: 0; } }

.parallel-pair-of-buttons {
  display: flex;
  flex-direction: column; }
  .parallel-pair-of-buttons button + button {
    margin-top: 1.5rem; }

@media (min-width: 500px) {
  .parallel-pair-of-buttons {
    flex-direction: row;
    align-items: center;
    justify-content: space-between; }
    .parallel-pair-of-buttons button + button {
      margin-top: 0; } }

.list-box {
  display: block;
  background: #fff;
  border: 3px solid #000;
  border-radius: 3px;
  padding: 3rem; }
  .list-box + .list-box {
    margin-top: 3.5rem; }

.ingredient-frame {
  border: 3px solid #000;
  border-radius: 3px;
  height: 270px;
  overflow: hidden;
  padding-bottom: 24px;
  display: flex;
  align-items: flex-end;
  justify-content: center;
  background: #E3BF96;
  /* Old browsers */
  background: -moz-linear-gradient(top, #E3BF96 0%, #FBF5A8 67%, #664431 67%);
  /* FF3.6-15 */
  background: -webkit-linear-gradient(top, #E3BF96 0%, #FBF5A8 67%, #664431 67%);
  /* Chrome10-25,Safari5.1-6 */
  background: linear-gradient(to bottom, #E3BF96 0%, #FBF5A8 67%, #664431 67%);
  /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */ }

.ingredient-frame__item {
  position: relative;
  z-index: 0; }
  .ingredient-frame__item:before {
    content: '';
    position: absolute;
    top: 96%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 300px;
    height: 110px;
    opacity: 0.6;
    background: -moz-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.9) 0%, transparent 42%, transparent 100%);
    /* FF3.6-15 */
    background: -webkit-radial-gradient(center, ellipse cover, rgba(0, 0, 0, 0.9) 0%, transparent 42%, transparent 100%);
    /* Chrome10-25,Safari5.1-6 */
    background: radial-gradient(ellipse at center, rgba(0, 0, 0, 0.9) 0%, transparent 42%, transparent 100%);
    /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */
    z-index: -1;
    opacity: 0;
    animation: drop-shadow 400ms ease 1100ms 1 normal forwards; }

.ingredient-frame__item > img {
  display: block;
  transform: translateY(-250px);
  animation: drop-ingredient 350ms ease-in 1000ms 1 normal forwards; }

@keyframes drop-ingredient {
  to {
    transform: translateY(0); } }

@keyframes drop-shadow {
  to {
    opacity: 1; } }

.ingredient-list {
  list-style-type: none;
  padding: 0; }
  .ingredient-list li {
    font-size: 3rem;
    text-transform: initial;
    font-family: "Indie Flower", cursive;
    line-height: 1;
    margin: 1.3rem 0;
    display: flex;
    align-items: center;
    justify-content: space-between; }

.speech-bubble {
  position: relative;
  background-repeat: no-repeat;
  background-size: 100% 100%;
  background-image: url(../images/speech-bubble-small.svg); }

.speech__dialogue {
  margin: 0;
  font-size: 3rem;
  text-transform: initial;
  font-family: "Indie Flower", cursive;
  line-height: 1;
  font-size: 2.8rem;
  height: 24.5rem;
  width: 70%;
  margin-left: 15%;
  padding-top: 14%; }

.speech__button {
  border: none;
  background: transparent;
  padding: 0;
  display: inline;
  border: none;
  text-decoration: underline;
  position: absolute;
  transform: translateY(-50%);
  right: 12%;
  bottom: 13%;
  opacity: 1;
  transition: opacity 500ms ease-out; }
  .speech__button:hover, .speech__button:focus {
    text-decoration: none; }
  .speech__button img {
    will-change: transform;
    animation: swing-star 1.4s linear infinite normal forwards;
    height: 25px; }
  .speech__button:disabled {
    opacity: 0.8; }
    .speech__button:disabled img {
      animation: none; }

@keyframes swing-star {
  0%, 50%, 100% {
    transform: rotate(0) scale(1); }
  30% {
    transform: rotate(-10deg) scale(1.04); }
  80% {
    transform: rotate(10deg) scale(1.04); } }

@media (min-width: 500px) {
  .speech-bubble {
    background-image: url(../images/speech-bubble.svg); }
  .speech__dialogue {
    font-size: 3rem;
    height: 27.7rem; }
  .speech__button {
    right: 55px;
    bottom: 50px; }
    .speech__button img {
      height: auto; } }

@media (min-width: 650px) {
  .speech__dialogue {
    padding-top: 7.5rem;
    font-size: 3.5rem; } }

.visually-hidden {
  /* https://snook.ca/archives/html_and_css/hiding-content-for-accessibility */
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px); }

.top-margin-xl {
  margin-top: 8rem; }

.top-margin-lg {
  margin-top: 6rem; }

.top-margin {
  margin-top: 3rem; }

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zcmMvc2Fzcy9zdHlsZS5zY3NzP2NlMTUiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3Mvbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS5zY3NzL25vcm1hbGl6ZS5zY3NzPzI5MzEiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3Mvc3R5bGUuc2Nzcz84MTU2Iiwid2VicGFjazovLy8uL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19iYXNlLnNjc3M/M2NkNiIsIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fdmFyaWFibGVzLnNjc3M/YjEwOSIsIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fcGFnZS5zY3NzP2Q0N2UiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3Mvc3JjL3Nhc3MvcGFydGlhbHMvX21peGlucy5zY3NzP2NhMDQiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3Mvc3JjL3Nhc3MvcGFydGlhbHMvX2J1dHRvbi1iYXNlLnNjc3M/ODQxOSIsIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fYnV0dG9ucy5zY3NzP2EwYTciLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3Mvc3JjL3Nhc3MvcGFydGlhbHMvX2xpbmtzLnNjc3M/NmZhZiIsIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fbGlzdHMuc2Nzcz84ZGFiIiwid2VicGFjazovLy8uL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL190ZXh0LnNjc3M/YTM3MSIsIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fZm9ybXMuc2Nzcz9jZDhjIiwid2VicGFjazovLy8uL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19mb3JtLXNlbGVjdC5zY3NzP2VhZTAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3Mvc3JjL3Nhc3MvcGFydGlhbHMvX2Zvcm0tY2hlY2tib3guc2Nzcz83Yjg0Iiwid2VicGFjazovLy8uL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19mb3JtLXNlYXJjaC5zY3NzPzYzMDAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3Mvc3JjL3Nhc3MvcGFydGlhbHMvX2ZvY3VzLXJpbmctZml4LnNjc3M/ZWEyZSIsIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fbWVkaWEtYmxvY2suc2Nzcz9kZTY1Iiwid2VicGFjazovLy8uL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19idXR0b24tZ3JvdXBzLnNjc3M/OGE1YSIsIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fbGlzdC1ib3guc2Nzcz80Y2Q4Iiwid2VicGFjazovLy8uL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19pbmdyZWRpZW50LWZyYW1lLnNjc3M/ZmYzNSIsIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9faW5ncmVkaWVudC1saXN0LnNjc3M/ZDAwZiIsIndlYnBhY2s6Ly8vLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fc3BlZWNoLWJ1YmJsZS5zY3NzP2ViOTciLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3Mvc3JjL3Nhc3MvcGFydGlhbHMvX3V0aWxpdHkuc2Nzcz9mMjQ5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFVBQVU7QUNBVixzRUFBc0U7QUFFdEU7Ozs7R0FJRztBQUVIO0VBQ0Usd0JBQXVCO0VBQUcsT0FBTztFQUNqQywyQkFBMEI7RUFBRyxPQUFPO0VBQ3BDLCtCQUE4QjtFQUFHLE9BQU8sRUFDekM7O0FBRUQ7O0dBRUc7QUFFSDtFQUNFLFVBQVMsRUFDVjs7QUFFRDtnRkFDZ0Y7QUFFaEY7Ozs7O0dBS0c7QUFFSDs7Ozs7Ozs7Ozs7OztFQWFFLGVBQWMsRUFDZjs7QUFFRDs7O0dBR0c7QUFFSDs7OztFQUlFLHNCQUFxQjtFQUFHLE9BQU87RUFDL0IseUJBQXdCO0VBQUcsT0FBTyxFQUNuQzs7QUFFRDs7O0dBR0c7QUFFSDtFQUNFLGNBQWE7RUFDYixVQUFTLEVBQ1Y7O0FBRUQ7OztHQUdHO0FDTEg7O0VEU0UsY0FBYSxFQUNkOztBQUVEO2dGQUNnRjtBQUVoRjs7R0FFRztBQUVIO0VBQ0UsOEJBQTZCLEVBQzlCOztBQUVEOztHQUVHO0FBRUg7O0VBRUUsV0FBVSxFQUNYOztBQUVEO2dGQUNnRjtBQUVoRjs7R0FFRztBQUVIO0VBQ0UsMEJBQXlCLEVBQzFCOztBQUVEOztHQUVHO0FBRUg7O0VBRUUsa0JBQWlCLEVBQ2xCOztBQUVEOztHQUVHO0FBRUg7RUFDRSxtQkFBa0IsRUFDbkI7O0FBRUQ7OztHQUdHO0FBRUg7RUFDRSxlQUFjO0VBQ2QsaUJBQWdCLEVBQ2pCOztBQUVEOztHQUVHO0FBRUg7RUFDRSxpQkFBZ0I7RUFDaEIsWUFBVyxFQUNaOztBQUVEOztHQUVHO0FBRUg7RUFDRSxlQUFjLEVBQ2Y7O0FBRUQ7O0dBRUc7QUFFSDs7RUFFRSxlQUFjO0VBQ2QsZUFBYztFQUNkLG1CQUFrQjtFQUNsQix5QkFBd0IsRUFDekI7O0FBRUQ7RUFDRSxZQUFXLEVBQ1o7O0FBRUQ7RUFDRSxnQkFBZSxFQUNoQjs7QUFFRDtnRkFDZ0Y7QUFFaEY7O0dBRUc7QUFFSDtFQUNFLFVBQVMsRUFDVjs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsaUJBQWdCLEVBQ2pCOztBQUVEO2dGQUNnRjtBQUVoRjs7R0FFRztBQUVIO0VBQ0UsaUJBQWdCLEVBQ2pCOztBQUVEOztHQUVHO0FBRUg7RUFDRSw2QkFBNEI7RUFDNUIsd0JBQXVCO0VBQ3ZCLFVBQVMsRUFDVjs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsZUFBYyxFQUNmOztBQUVEOztHQUVHO0FBRUg7Ozs7RUFJRSxrQ0FBaUM7RUFDakMsZUFBYyxFQUNmOztBQUVEO2dGQUNnRjtBQUVoRjs7O0dBR0c7QUFFSDs7Ozs7R0FLRztBQUVIOzs7OztFQUtFLGVBQWM7RUFBRyxPQUFPO0VBQ3hCLGNBQWE7RUFBRyxPQUFPO0VBQ3ZCLFVBQVM7RUFBRyxPQUFPLEVBQ3BCOztBQUVEOztHQUVHO0FBRUg7RUFDRSxrQkFBaUIsRUFDbEI7O0FBRUQ7Ozs7O0dBS0c7QUFFSDs7RUFFRSxxQkFBb0IsRUFDckI7O0FBRUQ7Ozs7OztHQU1HO0FBRUg7Ozs7RUFJRSwyQkFBMEI7RUFBRyxPQUFPO0VBQ3BDLGdCQUFlO0VBQUcsT0FBTyxFQUMxQjs7QUFFRDs7R0FFRztBQUVIOztFQUVFLGdCQUFlLEVBQ2hCOztBQUVEOztHQUVHO0FBRUg7O0VBRUUsVUFBUztFQUNULFdBQVUsRUFDWDs7QUFFRDs7O0dBR0c7QUFFSDtFQUNFLG9CQUFtQixFQUNwQjs7QUFFRDs7Ozs7O0dBTUc7QUFFSDs7RUFFRSx1QkFBc0I7RUFBRyxPQUFPO0VBQ2hDLFdBQVU7RUFBRyxPQUFPLEVBQ3JCOztBQUVEOzs7O0dBSUc7QUFFSDs7RUFFRSxhQUFZLEVBQ2I7O0FBRUQ7Ozs7R0FJRztBQUVIO0VBQ0UsOEJBQTZCO0VBQUcsT0FBTztFQUN2Qyw2QkFBNEI7RUFDNUIsZ0NBQStCO0VBQUcsT0FBTztFQUN6Qyx3QkFBdUIsRUFDeEI7O0FBRUQ7Ozs7R0FJRztBQUVIOztFQUVFLHlCQUF3QixFQUN6Qjs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsMEJBQXlCO0VBQ3pCLGNBQWE7RUFDYiwrQkFBOEIsRUFDL0I7O0FBRUQ7OztHQUdHO0FBRUg7RUFDRSxVQUFTO0VBQUcsT0FBTztFQUNuQixXQUFVO0VBQUcsT0FBTyxFQUNyQjs7QUFFRDs7R0FFRztBQUVIO0VBQ0UsZUFBYyxFQUNmOztBQUVEOzs7R0FHRztBQUVIO0VBQ0Usa0JBQWlCLEVBQ2xCOztBQUVEO2dGQUNnRjtBQUVoRjs7R0FFRztBQUVIO0VBQ0UsMEJBQXlCO0VBQ3pCLGtCQUFpQixFQUNsQjs7QUFFRDs7RUFFRSxXQUFVLEVBQ1g7O0FFMWFEO0VBQ0ksZUFBYztFQUNkLHVCQUFzQixFQUl6QjtFQUhHO0lBSEo7TUFJUSxpQkFBZ0IsRUFFdkI7O0FBRUQ7RUFDSSxvQkFBbUIsRUFDcEI7O0FBRUg7RUFDSSxvQkNaVztFRGFYLHFDQ2NrQztFRGJsQyxrQkNxQm1CO0VEcEJuQixlQ1hXO0VEWVgsaUJDZXNCLEVEZHpCOztBQUVEO0VBQ0ksZ0JBQWU7RUFDZixhQUFZO0VBQ1osZUFBYztFQUNkLGdCQ0FvQixFREN2Qjs7QUV6QkQ7RUFDSSxpQkFBZ0IsRUFDbkI7O0FBRUQ7RUFDSSxzQkFBcUIsRUFNeEI7RUFQRDtJQUdRLGVBQWM7SUFDZCxnQkFBZTtJQUNmLGFBQVksRUFDZjs7QUFHTDtFQUNJLHFCQUFvQixFQUN2Qjs7QUFFRDtFQUNJLG9CRGJXO0VDY1gsdUJBQXNCO0VBQ3RCLGVEYlksRUNrQmY7RUFSRDtJQzZCSSxzQkFBcUI7SUR2QmpCLGVEaEJRLEVDaUJYO0lBUEw7TUMrQlEsMkJBQTBCLEVBQzdCOztBRHRCTDtFQUNJLGNBQWE7RUFDYixvQkFBbUI7RUFDbkIsK0JBQThCLEVBQ2pDOztBQUVEO0VBQ0k7SUFDSSxnQ0FBK0IsRUFDbEM7RUFFRDtJQUNJLGdDQUErQixFQUNsQzs7QUV4Q0wsMERBQTBEO0FBQzFEO0VES0ksZUYyQmlCO0VFMUJqQixrQkYrQnFCO0VFOUJyQixxQ0ZxQm9DO0VHMUJwQyxzQkFBcUI7RUFDckIsbUJIb0RlO0VHbkRmLHNCQUFxQjtFQUNyQixxQkFBb0I7RUFDcEIsWUFBVztFQUNYLHVCQUFzQjtFQUN0QixpQkFBZ0I7RUFDaEIsa0JBQWlCO0VBQ2pCLHNDQUFpRCxFQU9wRDtFQWpCRDtJQVlRLDJCQUEwQixFQUM3QjtFQWJMO0lBZVEsMkJBQTBCLEVBQzdCOztBQ2hCTCxzQkFBc0I7QUFDdEI7RUFFSSxvQkpRWSxFSUpmO0VBTkQ7SUFJUSxvQkpPVSxFSU5iOztBQUlMO0VGTEksZUYyQmlCO0VFMUJqQixrQkYrQnFCO0VFOUJyQixxQ0ZxQm9DO0VFakJwQyxhQUFZO0VBQ1osd0JBQXVCO0VBQ3ZCLFdBQVU7RUFDVixnQkFBZTtFQUNmLGFBQVk7RUFDWiwyQkFBMEI7RUVIMUIsa0JKd0JxQixFSXZCeEI7RUZHRztJQUNJLHNCQUFxQixFQUN4Qjs7QUVITCxlQUFlO0FBRWY7RUFDSSxvQkpWWSxFSWNmO0VBTEQ7SUFHUSxvQkpYbUIsRUlZdEI7O0FBR0w7RUFDSSxvQkpuQlM7RUlvQlQsWUFBVyxFQUlkO0VBTkQ7SUFJUSxvQkpyQmlCLEVJc0JwQjs7QUFHTDtFQUNJLHVCQUFzQjtFQUN0QixnQkpDc0IsRUlBekI7O0FBRUQ7RUFDSSxlSmhDUyxFSW9DWjtFQUxEO0lBR1EsZUpqQ2lCLEVJa0NwQjs7QUMzQ0w7RUFDSSxlTElXLEVLQWQ7RUFMRDtJQUdRLHNCQUFxQixFQUN4Qjs7QUFHTDtFSHVDSSxzQkFBcUIsRUdyQ3hCO0VIc0NHO0lBQ0ksMkJBQTBCLEVBQzdCOztBSWpETDtFQUNJLFdBQVU7RUFDVixVQUFTO0VBQ1QsaUJBQWdCO0VBQ2hCLGdCQUFlLEVBUWxCO0VBWkQ7SUFNUSxnQkFBZTtJQUNmLG1CQUFrQixFQUNyQjtFQVJMO0lBVVEsY0FBYSxFQUNoQjs7QUNYTDtFQUNJLGVQSVcsRU9IZDs7QUFFRDtFQUNJLHFDUHdCb0M7RU92QnBDLGlCUHdCVztFT3ZCWCxlUDBCaUI7RU96QmpCLHNCUFlrQixFT1hyQjs7QUFFRDtFQUNJLGlCUG1CUztFT2xCVCwwQkFBeUI7RUFDekIsaUJBQXdCLEVBQzNCOztBQUVEO0VBQ0ksa0JQdUJpQixFT3RCcEI7O0FBRUQ7RUFDSSxnQlBvQmUsRU9uQmxCOztBQUVEO0VBQ0ksa0JQaUJpQixFT2hCcEI7O0FBRUQ7RUFDSSxpQkFBd0IsRUFDM0I7O0FBRUQ7RUFDSSxtQkFBa0IsRUFDckI7O0FBRUQ7RUFDSSxnQlBFeUIsRU9ENUI7O0FBRUQ7RUxqQkksZ0JGYXNCO0VFWnRCLHdCQUF1QjtFQUN2QixxQ0ZHb0M7RUVGcEMsZUZNaUIsRU9VcEI7O0FBRUQ7RUFDSSxzQkFBcUI7RUFDckIsY0FBYSxFQUNoQjs7QVhwQ0QsV0FBVztBWVpYO0VBQ0ksaUJBQTBCLEVBQzdCOztBQUVEO0VBQ0ksaUJBQXVCLEVBQzFCOztBQUVELFlBQVk7QUFFWjtFQUNJLGVBQWM7RU5vQmQsa0JBQWlCO0VBQ2pCLDBCQUF5QjtFQUN6QixxQ0ZKb0M7RUVLcEMsZUZEaUIsRVFwQnBCOztBQUVEO0VBQ0ksb0JBQW1CLEVBQ3RCOztBQUVELFlBQVk7QUFFWjtFQUNJLG9CUnBCb0I7RUVzQnBCLGdCRmFzQjtFRVp0Qix3QkFBdUI7RUFDdkIscUNGR29DO0VFRnBDLGVGTWlCO0VRVGpCLGVSbkJXO0VRb0JYLFlBQVc7RUFDWCxXQUFVO0VBQ1YsZ0JSb0JrQjtFUW5CbEIsYUFBWTtFQUNaLDhCUm9Cd0M7RVFuQnhDLG1CUjBCZTtFUXpCZiwrQlJzQnNCLEVRZnpCO0VBakJEO0lBWVEsb0JSOUJZLEVRK0JmOztBQU1MO0VBR0ksZVJHaUI7RVFGakIsZ0NBQXVEO0VBQ3ZELG1DQUEwRCxFQUM3RDs7QUFNRCxlQUFlO0FBRWY7RUFDSSxrQkFBaUIsRUFJcEI7RUFMRDtJQUdRLG9CQUFtQixFQUN0Qjs7QUFHTCxpQkFBaUI7QUFFakI7RUFBOEIseUJBQXlCO0VBQ25ELGVSMURVLEVRMkRYOztBQUNEO0VBQXFCLGlCQUFpQjtFQUNwQyxlUjdEVSxFUThEWDs7QUFDRDtFQUF5QixZQUFZO0VBQ25DLGVSaEVVLEVRaUVYOztBQUNEO0VBQW9CLGlCQUFpQjtFQUNuQyxlUm5FVSxFUW9FWDs7QUN0RUg7RUFDRSwwQlRIc0I7RVNJdEIsV0FBVTtFQUNWLHNCQUFxQjtFQUNyQixtQkFBa0I7RUFDbEIsV0FBVSxFQW9EWDtFQXpERDtJQVFJLGdCQUFlO0lBQ2YsaUJBQWdCO0lBQ2hCLHdCQUF1QjtJQUN2QixZQUFXO0lQU1gsZ0JGYXNCO0lFWnRCLHdCQUF1QjtJQUN2QixxQ0ZHb0M7SUVGcEMsZUZNaUI7SVNoQmpCLGVBakJXO0lBa0JYLGlEVDZCa0I7SVM1QmxCLG1CVHFDZTtJU3BDZix1QlQ2QndDO0lTNUJ4Qyx5QkFBd0I7SUFDeEIsc0JBQXFCLEVBR3RCO0VBckJIO0lBd0JJLFlBQVc7SUFDWCxlQUFjO0lBQ2QsWUFBVztJQUNYLG1CQUFrQjtJQUNsQixTQUFRO0lBQ1IsY1Rja0I7SVNibEIsbUJBQTZCO0lBQzdCLHFCQUFvQjtJQUNwQiwrQlQvQlc7SVNnQ1gsb0NBQTJDO0lBQzNDLHFDQUE0QyxFQUM3QztFQW5DSDtJQXNDSSxZQUFXO0lBQ1gsZUFBYztJQUNkLFlBQVc7SUFDWCxtQkFBa0I7SUFDbEIsT0FBTTtJQUNOLFNBQVE7SUFDUiw2QkFBd0Q7SUFDeEQsYUFBWTtJQUNaLG9CVGhEb0I7SVNpRHBCLHFCQUFvQjtJQUNwQixtQlRJZSxFU0hoQjtFQWpESDtJQW9ESSxvQlRyRGdCLEVTeURqQjtJQXhESDtNQXNETSxvQlR2RGMsRVN3RGY7O0FBSUwsaUJBQWlCO0FBQ2pCO0VBRUkscUJBQW9CO0VBQ3BCLFdBQVUsRUFDWDs7QUFKSDtFQU1JLFdBQVU7RUFDViwyQkFBOEI7RUFDOUIsV0FBVTtFQUNWLFNBQVEsRUFDVDs7QUFHSCxnQkFBZ0I7QUFDaEI7RUFDRTtJQUNFLGNBQWEsRUFDZDs7QUMvRUg7RUFDSSxlQUFjO0VBQ2QsbUJBQWtCO0VBQ2xCLHFCQUF1QztFQUN2QyxnQkFBZSxFQUNsQjs7QUFFRDtFQUNJLHVCQUFxQjtFQUNyQixzQkFBb0I7RUFDcEIsV0FBVSxFQUNiOztBQUVEO0VBQ0ksc0JBQXFCO0VBQ3JCLG1CQUFrQjtFQUNsQixRQUFPO0VBQ1Asd0JBQXVCO0VBQ3ZCLFlBcEJnQjtFQXFCaEIsYUFyQmdCO0VBc0JoQix1QlYyQndDO0VVMUJ4QyxvQlZyQm9CO0VVc0JwQixtQlZnQ2U7RVUvQmYsNEJBQTJCLEVBSzlCO0VBZkQ7SUFhUSxvQlZ6QlksRVUwQmY7O0FBR0w7RUFDSSxtQkFBa0I7RUFDbEIsZ0RBQStDO0VBQy9DLHNCQUFxQjtFQUNyQixlQUFjO0VBQ2QsWUFBVztFQUNYLGFBQVk7RUFDWixTQUFRO0VBQ1IsNkJWbkNXO0VVb0NYLGlCQUFnQjtFQUNoQixrQkFBaUI7RUFDakIsV0FBVTtFQUNWLDJDQUEwQyxFQUM3Qzs7QUFFRDtFQUNJLDhDQUE2QztFQUM3QyxXQUFVLEVBQ2I7O0FDbEREO0VBQ0ksbUJBQWtCO0VBQ2xCLHlCQUF3QixFQWlCM0I7RUFuQkQ7SUFLUSxtQkFBa0I7SUFDbEIsU0FBUTtJQUNSLFdBQVU7SUFDViw0QkFBMkIsRUFDOUI7RUFUTDtJQVlRLG1CQUFrQjtJQUFHLDRCQUE0QjtJQUNqRCx3QkFBdUIsRUFLMUI7SUFsQkw7TUFnQlksb0JBQThCLEVBQ2pDOztBQUlUO0VBQ0ksNEJBQTJCLEVBQzlCOztBQUVEO0VBQ0k7SUFDSSxxQ0FBcUM7RUFFekM7SUFDSSx1Q0FBdUM7RUFFM0M7SUFDSSxxQ0FBcUM7O0FDakM3Qzs7OztFQUtRLGNBQWEsRUFDaEI7O0FBR0w7Ozs7RUFLUSx1QlpKUSxFWUtYOztBaEJJTCxhQUFhO0FpQm5CYjtFQUNFLHFCQUE0QixFQUM3Qjs7QUFFRDtFQUVFLG1CYmNvQixFYWJyQjtFWCtCTztJQUNBLGNBQWEsRUFDaEI7RUFDRztJQUNBLGlCQUFnQixFQUNuQjs7QVdsQ0w7RUFDRSxVQUFTO0VBQ1QsZUFBYyxFQUNmOztBQUVEO0VBRUksaUJBQWdCLEVBQ2pCOztBQUhIO0VBS0ksb0JBQW1CLEVBQ3BCOztBQUdIO0VBRUU7SUFDRSxjQUFhO0lBQ2Isd0JBQXVCLEVBQ3hCO0VBRUQ7SUFDRSxtQkFBeUIsRUFDMUI7RUFFRDtJQUNFLFFBQU87SUFDUCxjQUFhLEVBQ2Q7O0FDckNIO0VBQ0ksY0FBYTtFQUNiLHVCQUFzQixFQUt6QjtFQVBEO0lBS1EsbUJkZWMsRWNkakI7O0FBR0w7RUFFSTtJQUNJLG9CQUFtQjtJQUNuQixvQkFBbUI7SUFDbkIsK0JBQThCLEVBS2pDO0lBUkQ7TUFNUSxjQUFhLEVBQ2hCOztBQ2xCVDtFQUNJLGVBQWM7RUFDZCxpQkFBZ0I7RWJEaEIsdUJBQXNCO0VBQ3RCLG1CRnNEZTtFZXBEZixjQUFhLEVBS2hCO0VBVEQ7SUFPUSxtQmZrQmEsRWVqQmhCOztBQ1JMO0VkQ0ksdUJBQXNCO0VBQ3RCLG1CRnNEZTtFZ0J0RGYsY0FBYTtFQUNiLGlCQUFnQjtFQUNoQixxQkFBb0I7RUFDcEIsY0FBYTtFQUNiLHNCQUFxQjtFQUNyQix3QkFBdUI7RWQ4Q3ZCLG9CRnBDd0I7RUVvQ1Msa0JBQWtCO0VBQ25ELDRFQUFpRztFQUFFLGNBQWM7RUFDakgsK0VBQWtHO0VBQUUsNkJBQTZCO0VBQ2pJLDZFQUFnRztFQUFFLHNEQUFzRCxFYy9DM0o7O0FBRUQ7RUFDSSxtQkFBa0I7RUFDbEIsV0FBVSxFQWViO0VBakJEO0lBSVEsWUFBVztJQUNYLG1CQUFrQjtJQUNsQixTQUFRO0lBQ1IsVUFBUztJQUNULGlDQUFnQztJQUNoQyxhQUFZO0lBQ1osY0FBYTtJQUNiLGFBQVk7SWRzQ2hCLGtIQUFrSDtJQUFFLGNBQWM7SUFDbEkscUhBQW1IO0lBQUUsNkJBQTZCO0lBQ2xKLHlHQUF1RztJQUFFLHNEQUFzRDtJY3RDM0osWUFBVztJQUNYLFdBQVU7SUFDViwyREFBMEQsRUFDN0Q7O0FBR0w7RUFDSSxlQUFjO0VBQ2QsOEJBQTZCO0VBQzdCLGtFQUFpRSxFQUNwRTs7QUFFRDtFQUNJO0lBQ0kseUJBQXdCOztBQUloQztFQUNJO0lBQ0ksV0FBVTs7QUM1Q2xCO0VBQ0ksc0JBQXFCO0VBQ3JCLFdBQVUsRUFVYjtFQVpEO0lmd0JJLGdCRmFzQjtJRVp0Qix3QkFBdUI7SUFDdkIscUNGR29DO0lFRnBDLGVGTWlCO0lpQjNCYixpQkFBZ0I7SUFDaEIsY0FBYTtJQUNiLG9CQUFtQjtJQUNuQiwrQkFBOEIsRUFDakM7O0FDVkw7RUFDSSxtQkFBa0I7RUFDbEIsNkJBQTRCO0VBQzVCLDJCQUEwQjtFQUMxQixnREFBMEQsRUFDN0Q7O0FBRUQ7RUFDSSxVQUFTO0VoQmdCVCxnQkZhc0I7RUVadEIsd0JBQXVCO0VBQ3ZCLHFDRkdvQztFRUZwQyxlRk1pQjtFa0J2QmpCLGtCQUFpQjtFQUNqQixnQkFBZTtFQUNmLFdBQVU7RUFDVixpQkFBZ0I7RUFDaEIsaUJBQWdCLEVBQ25COztBQUVEO0VoQkxJLGFBQVk7RUFDWix3QkFBdUI7RUFDdkIsV0FBVTtFQUNWLGdCQUFlO0VBQ2YsYUFBWTtFQUNaLDJCQUEwQjtFZ0JHMUIsbUJBQWtCO0VBQ2xCLDRCQUEyQjtFQUUzQixXQUFVO0VBQ1YsWUFBVztFQUVYLFdBQVU7RUFDVixtQ2xCMEJzQixFa0JaekI7RWhCdkJHO0lBQ0ksc0JBQXFCLEVBQ3hCO0VnQkhMO0lBYVEsdUJBQXNCO0lBQ3RCLDJEQUEwRDtJQUMxRCxhQUFZLEVBQ2Y7RUFoQkw7SUFtQlEsYUFBWSxFQUlmO0lBdkJMO01BcUJZLGdCQUFlLEVBQ2xCOztBQUlUO0VBQ0k7SUFDSSw4QkFBNkI7RUFFakM7SUFDSSxzQ0FBcUM7RUFFekM7SUFDSSxxQ0FBb0M7O0FBSTVDO0VBQ0k7SUFDSSxnREFBb0QsRUFDdkQ7RUFFRDtJQUNJLGdCbEJ4QmtCO0lrQnlCbEIsZ0JBQWUsRUFDbEI7RUFFRDtJQUNJLFlBQVc7SUFDWCxhQUFZLEVBSWY7SUFORDtNQUlRLGFBQVksRUFDZjs7QUFJVDtFQUNJO0lBQ0ksb0JBQW1CO0lBQ25CLGtCQUFpQixFQUNwQjs7QUM5RUw7RUFBbUIsNkVBQTZFO0VBQzVGLDhCQUE2QjtFQUM3QixZQUFXO0VBQUcsV0FBVTtFQUN4QixpQkFBZ0I7RUFDaEIsK0JBQThCLEVBQ2pDOztBQUVEO0VBQ0ksaUJBQWdCLEVBQ25COztBQUVEO0VBQ0ksaUJBQTZCLEVBQ2hDOztBQUVEO0VBQ0ksaUJuQkthLEVtQkpoQiIsImZpbGUiOiIuLi9jc3Mvc3R5bGVzLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGJhc2UgKi9cclxuQGltcG9ydCAnLi4vLi4vbm9kZV9tb2R1bGVzL25vcm1hbGl6ZS5zY3NzL25vcm1hbGl6ZS5zY3NzJztcclxuQGltcG9ydCAncGFydGlhbHMvbWl4aW5zJztcclxuQGltcG9ydCAncGFydGlhbHMvdmFyaWFibGVzJztcclxuQGltcG9ydCAncGFydGlhbHMvYmFzZSc7XHJcbkBpbXBvcnQgJ3BhcnRpYWxzL3BhZ2UnO1xyXG5AaW1wb3J0ICdwYXJ0aWFscy9idXR0b24tYmFzZSc7XHJcbkBpbXBvcnQgJ3BhcnRpYWxzL2J1dHRvbnMnO1xyXG5AaW1wb3J0ICdwYXJ0aWFscy9saW5rcyc7XHJcbkBpbXBvcnQgJ3BhcnRpYWxzL2xpc3RzJztcclxuQGltcG9ydCAncGFydGlhbHMvdGV4dCc7XHJcblxyXG4vKiBmb3JtcyAqL1xyXG5AaW1wb3J0ICdwYXJ0aWFscy9mb3Jtcyc7XHJcbkBpbXBvcnQgJ3BhcnRpYWxzL2Zvcm0tc2VsZWN0JztcclxuQGltcG9ydCAncGFydGlhbHMvZm9ybS1jaGVja2JveCc7XHJcbkBpbXBvcnQgJ3BhcnRpYWxzL2Zvcm0tc2VhcmNoJztcclxuQGltcG9ydCAncGFydGlhbHMvZm9jdXMtcmluZy1maXgnO1xyXG5cclxuLyogb2JqZWN0cyAqL1xyXG5AaW1wb3J0ICdwYXJ0aWFscy9tZWRpYS1ibG9jayc7XHJcbkBpbXBvcnQgJ3BhcnRpYWxzL2J1dHRvbi1ncm91cHMnO1xyXG5AaW1wb3J0ICdwYXJ0aWFscy9saXN0LWJveCc7XHJcbkBpbXBvcnQgJ3BhcnRpYWxzL3JlY2lwZS1jYXJkJztcclxuQGltcG9ydCAncGFydGlhbHMvaW5ncmVkaWVudC1mcmFtZSc7XHJcbkBpbXBvcnQgJ3BhcnRpYWxzL2luZ3JlZGllbnQtbGlzdCc7XHJcbkBpbXBvcnQgJ3BhcnRpYWxzL3NwZWVjaC1idWJibGUnO1xyXG5AaW1wb3J0ICdwYXJ0aWFscy91dGlsaXR5JztcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2Fzcy9zcmMvc2Fzcy9zdHlsZS5zY3NzIiwiLyohIG5vcm1hbGl6ZS5zY3NzIHYwLjEuMCB8IE1JVCBMaWNlbnNlIHwgYmFzZWQgb24gZ2l0LmlvL25vcm1hbGl6ZSAqL1xuXG4vKipcbiAqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbiAqICAgIHVzZXIgem9vbS5cbiAqL1xuXG5odG1sIHtcbiAgZm9udC1mYW1pbHk6IHNhbnMtc2VyaWY7IC8qIDEgKi9cbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7IC8qIDIgKi9cbiAgLXdlYmtpdC10ZXh0LXNpemUtYWRqdXN0OiAxMDAlOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgbWFyZ2luLlxuICovXG5cbmJvZHkge1xuICBtYXJnaW46IDA7XG59XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgZm9yIGFueSBIVE1MNSBlbGVtZW50IGluIElFIDgvOS5cbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBgZGV0YWlsc2Agb3IgYHN1bW1hcnlgIGluIElFIDEwLzExXG4gKiBhbmQgRmlyZWZveC5cbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBgbWFpbmAgaW4gSUUgMTEuXG4gKi9cblxuYXJ0aWNsZSxcbmFzaWRlLFxuZGV0YWlscyxcbmZpZ2NhcHRpb24sXG5maWd1cmUsXG5mb290ZXIsXG5oZWFkZXIsXG5oZ3JvdXAsXG5tYWluLFxubWVudSxcbm5hdixcbnNlY3Rpb24sXG5zdW1tYXJ5IHtcbiAgZGlzcGxheTogYmxvY2s7XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDgvOS5cbiAqIDIuIE5vcm1hbGl6ZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgYHByb2dyZXNzYCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbiAqL1xuXG5hdWRpbyxcbmNhbnZhcyxcbnByb2dyZXNzLFxudmlkZW8ge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IC8qIDEgKi9cbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyAvKiAyICovXG59XG5cbi8qKlxuICogUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbiAqIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG4gKi9cblxuYXVkaW86bm90KFtjb250cm9sc10pIHtcbiAgZGlzcGxheTogbm9uZTtcbiAgaGVpZ2h0OiAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgYFtoaWRkZW5dYCBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS8xMC5cbiAqIEhpZGUgdGhlIGB0ZW1wbGF0ZWAgZWxlbWVudCBpbiBJRSA4LzkvMTEsIFNhZmFyaSwgYW5kIEZpcmVmb3ggPCAyMi5cbiAqL1xuXG5baGlkZGVuXSxcbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cblxuLyogTGlua3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgY29sb3IgZnJvbSBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG4gKi9cblxuYSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuXG4vKipcbiAqIEltcHJvdmUgcmVhZGFiaWxpdHkgd2hlbiBmb2N1c2VkIGFuZCBhbHNvIG1vdXNlIGhvdmVyZWQgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gIG91dGxpbmU6IDA7XG59XG5cbi8qIFRleHQtbGV2ZWwgc2VtYW50aWNzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAvMTEsIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuXG5hYmJyW3RpdGxlXSB7XG4gIGJvcmRlci1ib3R0b206IDFweCBkb3R0ZWQ7XG59XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsZSBzZXQgdG8gYGJvbGRlcmAgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmIsXG5zdHJvbmcge1xuICBmb250LXdlaWdodDogYm9sZDtcbn1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKi9cblxuZGZuIHtcbiAgZm9udC1zdHlsZTogaXRhbGljO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgdmFyaWFibGUgYGgxYCBmb250LXNpemUgYW5kIG1hcmdpbiB3aXRoaW4gYHNlY3Rpb25gIGFuZCBgYXJ0aWNsZWBcbiAqIGNvbnRleHRzIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuXG5oMSB7XG4gIGZvbnQtc2l6ZTogMmVtO1xuICBtYXJnaW46IDAuNjdlbSAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXG4gKi9cblxubWFyayB7XG4gIGJhY2tncm91bmQ6ICNmZjA7XG4gIGNvbG9yOiAjMDAwO1xufVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnNtYWxsIHtcbiAgZm9udC1zaXplOiA4MCU7XG59XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgYWZmZWN0aW5nIGBsaW5lLWhlaWdodGAgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbnN1YixcbnN1cCB7XG4gIGZvbnQtc2l6ZTogNzUlO1xuICBsaW5lLWhlaWdodDogMDtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5cbnN1cCB7XG4gIHRvcDogLTAuNWVtO1xufVxuXG5zdWIge1xuICBib3R0b206IC0wLjI1ZW07XG59XG5cbi8qIEVtYmVkZGVkIGNvbnRlbnRcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogUmVtb3ZlIGJvcmRlciB3aGVuIGluc2lkZSBgYWAgZWxlbWVudCBpbiBJRSA4LzkvMTAuXG4gKi9cblxuaW1nIHtcbiAgYm9yZGVyOiAwO1xufVxuXG4vKipcbiAqIENvcnJlY3Qgb3ZlcmZsb3cgbm90IGhpZGRlbiBpbiBJRSA5LzEwLzExLlxuICovXG5cbnN2Zzpub3QoOnJvb3QpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcbn1cblxuLyogR3JvdXBpbmcgY29udGVudFxuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA4LzkgYW5kIFNhZmFyaS5cbiAqL1xuXG5maWd1cmUge1xuICBtYXJnaW46IDFlbSA0MHB4O1xufVxuXG4vKipcbiAqIEFkZHJlc3MgZGlmZmVyZW5jZXMgYmV0d2VlbiBGaXJlZm94IGFuZCBvdGhlciBicm93c2Vycy5cbiAqL1xuXG5ociB7XG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBoZWlnaHQ6IDA7XG59XG5cbi8qKlxuICogQ29udGFpbiBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cblxucHJlIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG59XG5cbi8qKlxuICogQWRkcmVzcyBvZGQgYGVtYC11bml0IGZvbnQgc2l6ZSByZW5kZXJpbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5cbmNvZGUsXG5rYmQsXG5wcmUsXG5zYW1wIHtcbiAgZm9udC1mYW1pbHk6IG1vbm9zcGFjZSwgbW9ub3NwYWNlO1xuICBmb250LXNpemU6IDFlbTtcbn1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG5cbi8qKlxuICogS25vd24gbGltaXRhdGlvbjogYnkgZGVmYXVsdCwgQ2hyb21lIGFuZCBTYWZhcmkgb24gT1MgWCBhbGxvdyB2ZXJ5IGxpbWl0ZWRcbiAqIHN0eWxpbmcgb2YgYHNlbGVjdGAsIHVubGVzcyBhIGBib3JkZXJgIHByb3BlcnR5IGlzIHNldC5cbiAqL1xuXG4vKipcbiAqIDEuIENvcnJlY3QgY29sb3Igbm90IGJlaW5nIGluaGVyaXRlZC5cbiAqICAgIEtub3duIGlzc3VlOiBhZmZlY3RzIGNvbG9yIG9mIGRpc2FibGVkIGVsZW1lbnRzLlxuICogMi4gQ29ycmVjdCBmb250IHByb3BlcnRpZXMgbm90IGJlaW5nIGluaGVyaXRlZC5cbiAqIDMuIEFkZHJlc3MgbWFyZ2lucyBzZXQgZGlmZmVyZW50bHkgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGNvbG9yOiBpbmhlcml0OyAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7IC8qIDIgKi9cbiAgbWFyZ2luOiAwOyAvKiAzICovXG59XG5cbi8qKlxuICogQWRkcmVzcyBgb3ZlcmZsb3dgIHNldCB0byBgaGlkZGVuYCBpbiBJRSA4LzkvMTAvMTEuXG4gKi9cblxuYnV0dG9uIHtcbiAgb3ZlcmZsb3c6IHZpc2libGU7XG59XG5cbi8qKlxuICogQWRkcmVzcyBpbmNvbnNpc3RlbnQgYHRleHQtdHJhbnNmb3JtYCBpbmhlcml0YW5jZSBmb3IgYGJ1dHRvbmAgYW5kIGBzZWxlY3RgLlxuICogQWxsIG90aGVyIGZvcm0gY29udHJvbCBlbGVtZW50cyBkbyBub3QgaW5oZXJpdCBgdGV4dC10cmFuc2Zvcm1gIHZhbHVlcy5cbiAqIENvcnJlY3QgYGJ1dHRvbmAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveCwgSUUgOC85LzEwLzExLCBhbmQgT3BlcmEuXG4gKiBDb3JyZWN0IGBzZWxlY3RgIHN0eWxlIGluaGVyaXRhbmNlIGluIEZpcmVmb3guXG4gKi9cblxuYnV0dG9uLFxuc2VsZWN0IHtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XG59XG5cbi8qKlxuICogMS4gQXZvaWQgdGhlIFdlYktpdCBidWcgaW4gQW5kcm9pZCA0LjAuKiB3aGVyZSAoMikgZGVzdHJveXMgbmF0aXZlIGBhdWRpb2BcbiAqICAgIGFuZCBgdmlkZW9gIGNvbnRyb2xzLlxuICogMi4gQ29ycmVjdCBpbmFiaWxpdHkgdG8gc3R5bGUgY2xpY2thYmxlIGBpbnB1dGAgdHlwZXMgaW4gaU9TLlxuICogMy4gSW1wcm92ZSB1c2FiaWxpdHkgYW5kIGNvbnNpc3RlbmN5IG9mIGN1cnNvciBzdHlsZSBiZXR3ZWVuIGltYWdlLXR5cGVcbiAqICAgIGBpbnB1dGAgYW5kIG90aGVycy5cbiAqL1xuXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sIC8qIDEgKi9cbmlucHV0W3R5cGU9XCJyZXNldFwiXSxcbmlucHV0W3R5cGU9XCJzdWJtaXRcIl0ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IGJ1dHRvbjsgLyogMiAqL1xuICBjdXJzb3I6IHBvaW50ZXI7IC8qIDMgKi9cbn1cblxuLyoqXG4gKiBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuICovXG5cbmJ1dHRvbltkaXNhYmxlZF0sXG5odG1sIGlucHV0W2Rpc2FibGVkXSB7XG4gIGN1cnNvcjogZGVmYXVsdDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gKi9cblxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyLFxuaW5wdXQ6Oi1tb3otZm9jdXMtaW5uZXIge1xuICBib3JkZXI6IDA7XG4gIHBhZGRpbmc6IDA7XG59XG5cbi8qKlxuICogQWRkcmVzcyBGaXJlZm94IDQrIHNldHRpbmcgYGxpbmUtaGVpZ2h0YCBvbiBgaW5wdXRgIHVzaW5nIGAhaW1wb3J0YW50YCBpblxuICogdGhlIFVBIHN0eWxlc2hlZXQuXG4gKi9cblxuaW5wdXQge1xuICBsaW5lLWhlaWdodDogbm9ybWFsO1xufVxuXG4vKipcbiAqIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB5b3UgZG9uJ3QgYXR0ZW1wdCB0byBzdHlsZSB0aGVzZSBlbGVtZW50cy5cbiAqIEZpcmVmb3gncyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZywgcGFkZGluZywgb3Igd2lkdGguXG4gKlxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBgY29udGVudC1ib3hgIGluIElFIDgvOS8xMC5cbiAqIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuXG4gKi9cblxuaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdLFxuaW5wdXRbdHlwZT1cInJhZGlvXCJdIHtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogRml4IHRoZSBjdXJzb3Igc3R5bGUgZm9yIENocm9tZSdzIGluY3JlbWVudC9kZWNyZW1lbnQgYnV0dG9ucy4gRm9yIGNlcnRhaW5cbiAqIGBmb250LXNpemVgIHZhbHVlcyBvZiB0aGUgYGlucHV0YCwgaXQgY2F1c2VzIHRoZSBjdXJzb3Igc3R5bGUgb2YgdGhlXG4gKiBkZWNyZW1lbnQgYnV0dG9uIHRvIGNoYW5nZSBmcm9tIGBkZWZhdWx0YCB0byBgdGV4dGAuXG4gKi9cblxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87XG59XG5cbi8qKlxuICogMS4gQWRkcmVzcyBgYXBwZWFyYW5jZWAgc2V0IHRvIGBzZWFyY2hmaWVsZGAgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKiAyLiBBZGRyZXNzIGBib3gtc2l6aW5nYCBzZXQgdG8gYGJvcmRlci1ib3hgIGluIFNhZmFyaSBhbmQgQ2hyb21lXG4gKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7IC8qIDEgKi9cbiAgLW1vei1ib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBjb250ZW50LWJveDsgLyogMiAqL1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbn1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIGFuZCBDaHJvbWUgb24gT1MgWC5cbiAqIFNhZmFyaSAoYnV0IG5vdCBDaHJvbWUpIGNsaXBzIHRoZSBjYW5jZWwgYnV0dG9uIHdoZW4gdGhlIHNlYXJjaCBpbnB1dCBoYXNcbiAqIHBhZGRpbmcgKGFuZCBgdGV4dGZpZWxkYCBhcHBlYXJhbmNlKS5cbiAqL1xuXG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdOjotd2Via2l0LXNlYXJjaC1jYW5jZWwtYnV0dG9uLFxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtZGVjb3JhdGlvbiB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbn1cblxuLyoqXG4gKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuXG4gKi9cblxuZmllbGRzZXQge1xuICBib3JkZXI6IDFweCBzb2xpZCAjYzBjMGMwO1xuICBtYXJnaW46IDAgMnB4O1xuICBwYWRkaW5nOiAwLjM1ZW0gMC42MjVlbSAwLjc1ZW07XG59XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LzEwLzExLlxuICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICovXG5cbmxlZ2VuZCB7XG4gIGJvcmRlcjogMDsgLyogMSAqL1xuICBwYWRkaW5nOiAwOyAvKiAyICovXG59XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS8xMC8xMS5cbiAqL1xuXG50ZXh0YXJlYSB7XG4gIG92ZXJmbG93OiBhdXRvO1xufVxuXG4vKipcbiAqIERvbid0IGluaGVyaXQgdGhlIGBmb250LXdlaWdodGAgKGFwcGxpZWQgYnkgYSBydWxlIGFib3ZlKS5cbiAqIE5PVEU6IHRoZSBkZWZhdWx0IGNhbm5vdCBzYWZlbHkgYmUgY2hhbmdlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxuICovXG5cbm9wdGdyb3VwIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XG59XG5cbi8qIFRhYmxlc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cblxuLyoqXG4gKiBSZW1vdmUgbW9zdCBzcGFjaW5nIGJldHdlZW4gdGFibGUgY2VsbHMuXG4gKi9cblxudGFibGUge1xuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xuICBib3JkZXItc3BhY2luZzogMDtcbn1cblxudGQsXG50aCB7XG4gIHBhZGRpbmc6IDA7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2Fzcy9ub2RlX21vZHVsZXMvbm9ybWFsaXplLnNjc3Mvbm9ybWFsaXplLnNjc3MiLCIvKiBiYXNlICovXG4vKiEgbm9ybWFsaXplLnNjc3MgdjAuMS4wIHwgTUlUIExpY2Vuc2UgfCBiYXNlZCBvbiBnaXQuaW8vbm9ybWFsaXplICovXG4vKipcbiAqIDEuIFNldCBkZWZhdWx0IGZvbnQgZmFtaWx5IHRvIHNhbnMtc2VyaWYuXG4gKiAyLiBQcmV2ZW50IGlPUyB0ZXh0IHNpemUgYWRqdXN0IGFmdGVyIG9yaWVudGF0aW9uIGNoYW5nZSwgd2l0aG91dCBkaXNhYmxpbmdcbiAqICAgIHVzZXIgem9vbS5cbiAqL1xuaHRtbCB7XG4gIGZvbnQtZmFtaWx5OiBzYW5zLXNlcmlmO1xuICAvKiAxICovXG4gIC1tcy10ZXh0LXNpemUtYWRqdXN0OiAxMDAlO1xuICAvKiAyICovXG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgbWFyZ2luLlxuICovXG5ib2R5IHtcbiAgbWFyZ2luOiAwOyB9XG5cbi8qIEhUTUw1IGRpc3BsYXkgZGVmaW5pdGlvbnNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIENvcnJlY3QgYGJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGZvciBhbnkgSFRNTDUgZWxlbWVudCBpbiBJRSA4LzkuXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYGRldGFpbHNgIG9yIGBzdW1tYXJ5YCBpbiBJRSAxMC8xMVxuICogYW5kIEZpcmVmb3guXG4gKiBDb3JyZWN0IGBibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBmb3IgYG1haW5gIGluIElFIDExLlxuICovXG5hcnRpY2xlLFxuYXNpZGUsXG5kZXRhaWxzLFxuZmlnY2FwdGlvbixcbmZpZ3VyZSxcbmZvb3RlcixcbmhlYWRlcixcbmhncm91cCxcbm1haW4sXG5tZW51LFxubmF2LFxuc2VjdGlvbixcbnN1bW1hcnkge1xuICBkaXNwbGF5OiBibG9jazsgfVxuXG4vKipcbiAqIDEuIENvcnJlY3QgYGlubGluZS1ibG9ja2AgZGlzcGxheSBub3QgZGVmaW5lZCBpbiBJRSA4LzkuXG4gKiAyLiBOb3JtYWxpemUgdmVydGljYWwgYWxpZ25tZW50IG9mIGBwcm9ncmVzc2AgaW4gQ2hyb21lLCBGaXJlZm94LCBhbmQgT3BlcmEuXG4gKi9cbmF1ZGlvLFxuY2FudmFzLFxucHJvZ3Jlc3MsXG52aWRlbyB7XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgLyogMSAqL1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG4gIC8qIDIgKi8gfVxuXG4vKipcbiAqIFByZXZlbnQgbW9kZXJuIGJyb3dzZXJzIGZyb20gZGlzcGxheWluZyBgYXVkaW9gIHdpdGhvdXQgY29udHJvbHMuXG4gKiBSZW1vdmUgZXhjZXNzIGhlaWdodCBpbiBpT1MgNSBkZXZpY2VzLlxuICovXG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7IH1cblxuLyoqXG4gKiBBZGRyZXNzIGBbaGlkZGVuXWAgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAuXG4gKiBIaWRlIHRoZSBgdGVtcGxhdGVgIGVsZW1lbnQgaW4gSUUgOC85LzExLCBTYWZhcmksIGFuZCBGaXJlZm94IDwgMjIuXG4gKi9cbltoaWRkZW5dLFxudGVtcGxhdGUge1xuICBkaXNwbGF5OiBub25lOyB9XG5cbi8qIExpbmtzXG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgdGhlIGdyYXkgYmFja2dyb3VuZCBjb2xvciBmcm9tIGFjdGl2ZSBsaW5rcyBpbiBJRSAxMC5cbiAqL1xuYSB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XG5cbi8qKlxuICogSW1wcm92ZSByZWFkYWJpbGl0eSB3aGVuIGZvY3VzZWQgYW5kIGFsc28gbW91c2UgaG92ZXJlZCBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbmE6YWN0aXZlLFxuYTpob3ZlciB7XG4gIG91dGxpbmU6IDA7IH1cblxuLyogVGV4dC1sZXZlbCBzZW1hbnRpY3NcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkvMTAvMTEsIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuYWJiclt0aXRsZV0ge1xuICBib3JkZXItYm90dG9tOiAxcHggZG90dGVkOyB9XG5cbi8qKlxuICogQWRkcmVzcyBzdHlsZSBzZXQgdG8gYGJvbGRlcmAgaW4gRmlyZWZveCA0KywgU2FmYXJpLCBhbmQgQ2hyb21lLlxuICovXG5iLFxuc3Ryb25nIHtcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7IH1cblxuLyoqXG4gKiBBZGRyZXNzIHN0eWxpbmcgbm90IHByZXNlbnQgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKi9cbmRmbiB7XG4gIGZvbnQtc3R5bGU6IGl0YWxpYzsgfVxuXG4vKipcbiAqIEFkZHJlc3MgdmFyaWFibGUgYGgxYCBmb250LXNpemUgYW5kIG1hcmdpbiB3aXRoaW4gYHNlY3Rpb25gIGFuZCBgYXJ0aWNsZWBcbiAqIGNvbnRleHRzIGluIEZpcmVmb3ggNCssIFNhZmFyaSwgYW5kIENocm9tZS5cbiAqL1xuaDEge1xuICBmb250LXNpemU6IDJlbTtcbiAgbWFyZ2luOiAwLjY3ZW0gMDsgfVxuXG4vKipcbiAqIEFkZHJlc3Mgc3R5bGluZyBub3QgcHJlc2VudCBpbiBJRSA4LzkuXG4gKi9cbm1hcmsge1xuICBiYWNrZ3JvdW5kOiAjZmYwO1xuICBjb2xvcjogIzAwMDsgfVxuXG4vKipcbiAqIEFkZHJlc3MgaW5jb25zaXN0ZW50IGFuZCB2YXJpYWJsZSBmb250IHNpemUgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zbWFsbCB7XG4gIGZvbnQtc2l6ZTogODAlOyB9XG5cbi8qKlxuICogUHJldmVudCBgc3ViYCBhbmQgYHN1cGAgYWZmZWN0aW5nIGBsaW5lLWhlaWdodGAgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5zdWIsXG5zdXAge1xuICBmb250LXNpemU6IDc1JTtcbiAgbGluZS1oZWlnaHQ6IDA7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IGJhc2VsaW5lOyB9XG5cbnN1cCB7XG4gIHRvcDogLTAuNWVtOyB9XG5cbnN1YiB7XG4gIGJvdHRvbTogLTAuMjVlbTsgfVxuXG4vKiBFbWJlZGRlZCBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBSZW1vdmUgYm9yZGVyIHdoZW4gaW5zaWRlIGBhYCBlbGVtZW50IGluIElFIDgvOS8xMC5cbiAqL1xuaW1nIHtcbiAgYm9yZGVyOiAwOyB9XG5cbi8qKlxuICogQ29ycmVjdCBvdmVyZmxvdyBub3QgaGlkZGVuIGluIElFIDkvMTAvMTEuXG4gKi9cbnN2Zzpub3QoOnJvb3QpIHtcbiAgb3ZlcmZsb3c6IGhpZGRlbjsgfVxuXG4vKiBHcm91cGluZyBjb250ZW50XG4gICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqL1xuLyoqXG4gKiBBZGRyZXNzIG1hcmdpbiBub3QgcHJlc2VudCBpbiBJRSA4LzkgYW5kIFNhZmFyaS5cbiAqL1xuZmlndXJlIHtcbiAgbWFyZ2luOiAxZW0gNDBweDsgfVxuXG4vKipcbiAqIEFkZHJlc3MgZGlmZmVyZW5jZXMgYmV0d2VlbiBGaXJlZm94IGFuZCBvdGhlciBicm93c2Vycy5cbiAqL1xuaHIge1xuICAtbW96LWJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgaGVpZ2h0OiAwOyB9XG5cbi8qKlxuICogQ29udGFpbiBvdmVyZmxvdyBpbiBhbGwgYnJvd3NlcnMuXG4gKi9cbnByZSB7XG4gIG92ZXJmbG93OiBhdXRvOyB9XG5cbi8qKlxuICogQWRkcmVzcyBvZGQgYGVtYC11bml0IGZvbnQgc2l6ZSByZW5kZXJpbmcgaW4gYWxsIGJyb3dzZXJzLlxuICovXG5jb2RlLFxua2JkLFxucHJlLFxuc2FtcCB7XG4gIGZvbnQtZmFtaWx5OiBtb25vc3BhY2UsIG1vbm9zcGFjZTtcbiAgZm9udC1zaXplOiAxZW07IH1cblxuLyogRm9ybXNcbiAgID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovXG4vKipcbiAqIEtub3duIGxpbWl0YXRpb246IGJ5IGRlZmF1bHQsIENocm9tZSBhbmQgU2FmYXJpIG9uIE9TIFggYWxsb3cgdmVyeSBsaW1pdGVkXG4gKiBzdHlsaW5nIG9mIGBzZWxlY3RgLCB1bmxlc3MgYSBgYm9yZGVyYCBwcm9wZXJ0eSBpcyBzZXQuXG4gKi9cbi8qKlxuICogMS4gQ29ycmVjdCBjb2xvciBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogICAgS25vd24gaXNzdWU6IGFmZmVjdHMgY29sb3Igb2YgZGlzYWJsZWQgZWxlbWVudHMuXG4gKiAyLiBDb3JyZWN0IGZvbnQgcHJvcGVydGllcyBub3QgYmVpbmcgaW5oZXJpdGVkLlxuICogMy4gQWRkcmVzcyBtYXJnaW5zIHNldCBkaWZmZXJlbnRseSBpbiBGaXJlZm94IDQrLCBTYWZhcmksIGFuZCBDaHJvbWUuXG4gKi9cbmJ1dHRvbixcbmlucHV0LFxub3B0Z3JvdXAsXG5zZWxlY3QsXG50ZXh0YXJlYSB7XG4gIGNvbG9yOiBpbmhlcml0O1xuICAvKiAxICovXG4gIGZvbnQ6IGluaGVyaXQ7XG4gIC8qIDIgKi9cbiAgbWFyZ2luOiAwO1xuICAvKiAzICovIH1cblxuLyoqXG4gKiBBZGRyZXNzIGBvdmVyZmxvd2Agc2V0IHRvIGBoaWRkZW5gIGluIElFIDgvOS8xMC8xMS5cbiAqL1xuYnV0dG9uIHtcbiAgb3ZlcmZsb3c6IHZpc2libGU7IH1cblxuLyoqXG4gKiBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4gKiBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuICogQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94LCBJRSA4LzkvMTAvMTEsIGFuZCBPcGVyYS5cbiAqIENvcnJlY3QgYHNlbGVjdGAgc3R5bGUgaW5oZXJpdGFuY2UgaW4gRmlyZWZveC5cbiAqL1xuYnV0dG9uLFxuc2VsZWN0IHtcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7IH1cblxuLyoqXG4gKiAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYFxuICogICAgYW5kIGB2aWRlb2AgY29udHJvbHMuXG4gKiAyLiBDb3JyZWN0IGluYWJpbGl0eSB0byBzdHlsZSBjbGlja2FibGUgYGlucHV0YCB0eXBlcyBpbiBpT1MuXG4gKiAzLiBJbXByb3ZlIHVzYWJpbGl0eSBhbmQgY29uc2lzdGVuY3kgb2YgY3Vyc29yIHN0eWxlIGJldHdlZW4gaW1hZ2UtdHlwZVxuICogICAgYGlucHV0YCBhbmQgb3RoZXJzLlxuICovXG5idXR0b24sXG5odG1sIGlucHV0W3R5cGU9XCJidXR0b25cIl0sXG5pbnB1dFt0eXBlPVwicmVzZXRcIl0sXG5pbnB1dFt0eXBlPVwic3VibWl0XCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiBidXR0b247XG4gIC8qIDIgKi9cbiAgY3Vyc29yOiBwb2ludGVyO1xuICAvKiAzICovIH1cblxuLyoqXG4gKiBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuICovXG5idXR0b25bZGlzYWJsZWRdLFxuaHRtbCBpbnB1dFtkaXNhYmxlZF0ge1xuICBjdXJzb3I6IGRlZmF1bHQ7IH1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgYm9yZGVyIGluIEZpcmVmb3ggNCsuXG4gKi9cbmJ1dHRvbjo6LW1vei1mb2N1cy1pbm5lcixcbmlucHV0OjotbW96LWZvY3VzLWlubmVyIHtcbiAgYm9yZGVyOiAwO1xuICBwYWRkaW5nOiAwOyB9XG5cbi8qKlxuICogQWRkcmVzcyBGaXJlZm94IDQrIHNldHRpbmcgYGxpbmUtaGVpZ2h0YCBvbiBgaW5wdXRgIHVzaW5nIGAhaW1wb3J0YW50YCBpblxuICogdGhlIFVBIHN0eWxlc2hlZXQuXG4gKi9cbmlucHV0IHtcbiAgbGluZS1oZWlnaHQ6IG5vcm1hbDsgfVxuXG4vKipcbiAqIEl0J3MgcmVjb21tZW5kZWQgdGhhdCB5b3UgZG9uJ3QgYXR0ZW1wdCB0byBzdHlsZSB0aGVzZSBlbGVtZW50cy5cbiAqIEZpcmVmb3gncyBpbXBsZW1lbnRhdGlvbiBkb2Vzbid0IHJlc3BlY3QgYm94LXNpemluZywgcGFkZGluZywgb3Igd2lkdGguXG4gKlxuICogMS4gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBgY29udGVudC1ib3hgIGluIElFIDgvOS8xMC5cbiAqIDIuIFJlbW92ZSBleGNlc3MgcGFkZGluZyBpbiBJRSA4LzkvMTAuXG4gKi9cbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXSxcbmlucHV0W3R5cGU9XCJyYWRpb1wiXSB7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogRml4IHRoZSBjdXJzb3Igc3R5bGUgZm9yIENocm9tZSdzIGluY3JlbWVudC9kZWNyZW1lbnQgYnV0dG9ucy4gRm9yIGNlcnRhaW5cbiAqIGBmb250LXNpemVgIHZhbHVlcyBvZiB0aGUgYGlucHV0YCwgaXQgY2F1c2VzIHRoZSBjdXJzb3Igc3R5bGUgb2YgdGhlXG4gKiBkZWNyZW1lbnQgYnV0dG9uIHRvIGNoYW5nZSBmcm9tIGBkZWZhdWx0YCB0byBgdGV4dGAuXG4gKi9cbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b24sXG5pbnB1dFt0eXBlPVwibnVtYmVyXCJdOjotd2Via2l0LW91dGVyLXNwaW4tYnV0dG9uIHtcbiAgaGVpZ2h0OiBhdXRvOyB9XG5cbi8qKlxuICogMS4gQWRkcmVzcyBgYXBwZWFyYW5jZWAgc2V0IHRvIGBzZWFyY2hmaWVsZGAgaW4gU2FmYXJpIGFuZCBDaHJvbWUuXG4gKiAyLiBBZGRyZXNzIGBib3gtc2l6aW5nYCBzZXQgdG8gYGJvcmRlci1ib3hgIGluIFNhZmFyaSBhbmQgQ2hyb21lXG4gKiAgICAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbiAqL1xuaW5wdXRbdHlwZT1cInNlYXJjaFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogdGV4dGZpZWxkO1xuICAvKiAxICovXG4gIC1tb3otYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC13ZWJraXQtYm94LXNpemluZzogY29udGVudC1ib3g7XG4gIC8qIDIgKi9cbiAgYm94LXNpemluZzogY29udGVudC1ib3g7IH1cblxuLyoqXG4gKiBSZW1vdmUgaW5uZXIgcGFkZGluZyBhbmQgc2VhcmNoIGNhbmNlbCBidXR0b24gaW4gU2FmYXJpIGFuZCBDaHJvbWUgb24gT1MgWC5cbiAqIFNhZmFyaSAoYnV0IG5vdCBDaHJvbWUpIGNsaXBzIHRoZSBjYW5jZWwgYnV0dG9uIHdoZW4gdGhlIHNlYXJjaCBpbnB1dCBoYXNcbiAqIHBhZGRpbmcgKGFuZCBgdGV4dGZpZWxkYCBhcHBlYXJhbmNlKS5cbiAqL1xuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7IH1cblxuLyoqXG4gKiBEZWZpbmUgY29uc2lzdGVudCBib3JkZXIsIG1hcmdpbiwgYW5kIHBhZGRpbmcuXG4gKi9cbmZpZWxkc2V0IHtcbiAgYm9yZGVyOiAxcHggc29saWQgI2MwYzBjMDtcbiAgbWFyZ2luOiAwIDJweDtcbiAgcGFkZGluZzogMC4zNWVtIDAuNjI1ZW0gMC43NWVtOyB9XG5cbi8qKlxuICogMS4gQ29ycmVjdCBgY29sb3JgIG5vdCBiZWluZyBpbmhlcml0ZWQgaW4gSUUgOC85LzEwLzExLlxuICogMi4gUmVtb3ZlIHBhZGRpbmcgc28gcGVvcGxlIGFyZW4ndCBjYXVnaHQgb3V0IGlmIHRoZXkgemVybyBvdXQgZmllbGRzZXRzLlxuICovXG5sZWdlbmQge1xuICBib3JkZXI6IDA7XG4gIC8qIDEgKi9cbiAgcGFkZGluZzogMDtcbiAgLyogMiAqLyB9XG5cbi8qKlxuICogUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS8xMC8xMS5cbiAqL1xudGV4dGFyZWEge1xuICBvdmVyZmxvdzogYXV0bzsgfVxuXG4vKipcbiAqIERvbid0IGluaGVyaXQgdGhlIGBmb250LXdlaWdodGAgKGFwcGxpZWQgYnkgYSBydWxlIGFib3ZlKS5cbiAqIE5PVEU6IHRoZSBkZWZhdWx0IGNhbm5vdCBzYWZlbHkgYmUgY2hhbmdlZCBpbiBDaHJvbWUgYW5kIFNhZmFyaSBvbiBPUyBYLlxuICovXG5vcHRncm91cCB7XG4gIGZvbnQtd2VpZ2h0OiBib2xkOyB9XG5cbi8qIFRhYmxlc1xuICAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi9cbi8qKlxuICogUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxuICovXG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwOyB9XG5cbnRkLFxudGgge1xuICBwYWRkaW5nOiAwOyB9XG5cbmh0bWwge1xuICBmb250LXNpemU6IDUwJTtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDsgfVxuICBAbWVkaWEgKG1pbi13aWR0aDogNTAwcHgpIHtcbiAgICBodG1sIHtcbiAgICAgIGZvbnQtc2l6ZTogNjIuNSU7IH0gfVxuXG4qLCAqOmFmdGVyLCAqOmJlZm9yZSB7XG4gIGJveC1zaXppbmc6IGluaGVyaXQ7IH1cblxuYm9keSB7XG4gIGJhY2tncm91bmQ6ICNGOUVBQ0E7XG4gIGZvbnQtZmFtaWx5OiBcIk9wZW4gU2Fuc1wiLCBzYW5zLXNlcmlmO1xuICBmb250LXNpemU6IDEuNnJlbTtcbiAgY29sb3I6ICM0NjMyMUQ7XG4gIGxpbmUtaGVpZ2h0OiAxLjY7IH1cblxuLmNvbnRhaW5lciB7XG4gIG1heC13aWR0aDogMTAwJTtcbiAgd2lkdGg6IDc1MHB4O1xuICBtYXJnaW46IDAgYXV0bztcbiAgcGFkZGluZzogMCAycmVtOyB9XG5cbi5oZWFkZXIge1xuICBtYXJnaW4tdG9wOiA2cmVtOyB9XG5cbi5sb2dvIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrOyB9XG4gIC5sb2dvID4gc3ZnIHtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgaGVpZ2h0OiBhdXRvOyB9XG5cbi5tYWluIHtcbiAgbWFyZ2luLWJvdHRvbTogMTRyZW07IH1cblxuLmZvb3RlciB7XG4gIGJhY2tncm91bmQ6ICM0NjMyMUQ7XG4gIHBhZGRpbmc6IDJyZW0gMCAxLjVyZW07XG4gIGNvbG9yOiAjQjhBMjk5OyB9XG4gIC5mb290ZXIgYSB7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGNvbG9yOiAjQjhBMjk5OyB9XG4gICAgLmZvb3RlciBhOmhvdmVyLCAuZm9vdGVyIGE6Zm9jdXMge1xuICAgICAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7IH1cblxuLmZvb3Rlci1jb250ZW50IHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyB9XG5cbkBtZWRpYSAobWluLXdpZHRoOiA1MDBweCkge1xuICAubWFpbiB7XG4gICAgbWluLWhlaWdodDogY2FsYygxMDB2aCAtIDI3NXB4KTsgfVxuICAubWFpbi0taG9tZSB7XG4gICAgbWluLWhlaWdodDogY2FsYygxMDB2aCAtIDk0MHB4KTsgfSB9XG5cbi8qIGluc3BpcmVkIGJ5IGh0dHBzOi8vY29kZXBlbi5pby9maW5uaHZtYW4vcGVuL01ReUp4Vi8gKi9cbi5idXR0b24ge1xuICBsaW5lLWhlaWdodDogMTtcbiAgZm9udC1zaXplOiAyLjNyZW07XG4gIGZvbnQtZmFtaWx5OiBcIkluZGllIEZsb3dlclwiLCBjdXJzaXZlO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGJvcmRlci1yYWRpdXM6IDNweDtcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICBwYWRkaW5nOiAxcmVtIDEuN3JlbTtcbiAgY29sb3I6ICMwMDA7XG4gIGJvcmRlcjogMnB4IHNvbGlkICMwMDA7XG4gIGJvcmRlci10b3A6IG5vbmU7XG4gIGJvcmRlci1sZWZ0OiBub25lO1xuICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IDEwMG1zIGVhc2Utb3V0OyB9XG4gIC5idXR0b246aG92ZXIsIC5idXR0b246Zm9jdXMge1xuICAgIGJveC1zaGFkb3c6IDFweCAxcHggMCAjMDAwOyB9XG4gIC5idXR0b246YWN0aXZlIHtcbiAgICBib3gtc2hhZG93OiAycHggMnB4IDAgIzAwMDsgfVxuXG4vKiB0eXBlcyBvZiBidXR0b25zICovXG4uYnV0dG9uIHtcbiAgYmFja2dyb3VuZDogI2ZmZjU2ODsgfVxuICAuYnV0dG9uOmhvdmVyLCAuYnV0dG9uOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kOiAjZmZmNzhkOyB9XG5cbi51bi1idXR0b24ge1xuICBsaW5lLWhlaWdodDogMTtcbiAgZm9udC1zaXplOiAyLjNyZW07XG4gIGZvbnQtZmFtaWx5OiBcIkluZGllIEZsb3dlclwiLCBjdXJzaXZlO1xuICBib3JkZXI6IG5vbmU7XG4gIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xuICBwYWRkaW5nOiAwO1xuICBkaXNwbGF5OiBpbmxpbmU7XG4gIGJvcmRlcjogbm9uZTtcbiAgdGV4dC1kZWNvcmF0aW9uOiB1bmRlcmxpbmU7XG4gIGZvbnQtc2l6ZTogMi4zcmVtOyB9XG4gIC51bi1idXR0b246aG92ZXIsIC51bi1idXR0b246Zm9jdXMge1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsgfVxuXG4vKiBtb2RpZmllcnMgKi9cbi5idXR0b24tLWltcG9ydGFudCB7XG4gIGJhY2tncm91bmQ6ICNGRkEzM0U7IH1cbiAgLmJ1dHRvbi0taW1wb3J0YW50OmhvdmVyLCAuYnV0dG9uLS1pbXBvcnRhbnQ6Zm9jdXMge1xuICAgIGJhY2tncm91bmQ6ICNmZmIyNjA7IH1cblxuLmJ1dHRvbi0tZGFuZ2VyIHtcbiAgYmFja2dyb3VuZDogI0RGMzAzNDtcbiAgY29sb3I6ICNmZmY7IH1cbiAgLmJ1dHRvbi0tZGFuZ2VyOmhvdmVyLCAuYnV0dG9uLS1kYW5nZXI6Zm9jdXMge1xuICAgIGJhY2tncm91bmQ6ICNlYjQ1NDg7IH1cblxuLmJ1dHRvbi0tbGFyZ2Uge1xuICBwYWRkaW5nOiAxLjNyZW0gMi4xcmVtO1xuICBmb250LXNpemU6IDNyZW07IH1cblxuLnVuLWJ1dHRvbi0tZGFuZ2VyIHtcbiAgY29sb3I6ICNERjMwMzQ7IH1cbiAgLnVuLWJ1dHRvbi0tZGFuZ2VyOmhvdmVyLCAudW4tYnV0dG9uLS1kYW5nZXI6Zm9jdXMge1xuICAgIGNvbG9yOiAjZWI0NTQ4OyB9XG5cbmEge1xuICBjb2xvcjogIzQ2MzIxRDsgfVxuICBhOmhvdmVyLCBhOmZvY3VzIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cblxuLnJldmVyc2UtbGluay11bmRlcmxpbmUge1xuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cbiAgLnJldmVyc2UtbGluay11bmRlcmxpbmU6aG92ZXIsIC5yZXZlcnNlLWxpbmstdW5kZXJsaW5lOmZvY3VzIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsgfVxuXG4ubGluay1saXN0IHtcbiAgcGFkZGluZzogMDtcbiAgbWFyZ2luOiAwO1xuICBsaXN0LXN0eWxlOiBub25lO1xuICBkaXNwbGF5OiBpbmxpbmU7IH1cbiAgLmxpbmstbGlzdCA+IGxpIHtcbiAgICBkaXNwbGF5OiBpbmxpbmU7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlOyB9XG4gIC5saW5rLWxpc3QgbGkgKyBsaTpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICd8ICc7IH1cblxuaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XG4gIGNvbG9yOiAjNDYzMjFEOyB9XG5cbmgxLCBoMiwgaDMge1xuICBmb250LWZhbWlseTogXCJJbmRpZSBGbG93ZXJcIiwgY3Vyc2l2ZTtcbiAgZm9udC13ZWlnaHQ6IDQwMDtcbiAgbGluZS1oZWlnaHQ6IDE7XG4gIG1hcmdpbjogNnJlbSAwIDEuNXJlbTsgfVxuXG5oNCwgaDUsIGg2IHtcbiAgZm9udC13ZWlnaHQ6IDcwMDtcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcbiAgbWFyZ2luOiAxLjVyZW0gMDsgfVxuXG5oMSB7XG4gIGZvbnQtc2l6ZTogNC43cmVtOyB9XG5cbmgyIHtcbiAgZm9udC1zaXplOiA0cmVtOyB9XG5cbmgzIHtcbiAgZm9udC1zaXplOiAzLjdyZW07IH1cblxucCB7XG4gIG1hcmdpbjogMS41cmVtIDA7IH1cblxuLnRleHQtY2VudGVyIHtcbiAgdGV4dC1hbGlnbjogY2VudGVyOyB9XG5cbi50aXRsZS1iaWdnZXIge1xuICBmb250LXNpemU6IDVyZW07IH1cblxuLm5vdmVsdHktYm9keS10ZXh0IHtcbiAgZm9udC1zaXplOiAzcmVtO1xuICB0ZXh0LXRyYW5zZm9ybTogaW5pdGlhbDtcbiAgZm9udC1mYW1pbHk6IFwiSW5kaWUgRmxvd2VyXCIsIGN1cnNpdmU7XG4gIGxpbmUtaGVpZ2h0OiAxOyB9XG5cbi5wbHVzLW9uZS1zcGFjZXIge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAwLjNyZW07IH1cblxuLyogZm9ybXMgKi9cbi5mb3JtLWl0ZW0ge1xuICBtYXJnaW46IDZyZW0gMCAwOyB9XG5cbi5mb3JtLWl0ZW0tc2hvcnQge1xuICBtYXJnaW46IDNyZW0gMCAwOyB9XG5cbi8qIGxhYmVscyAqL1xuLmZvcm0taXRlbSA+IGxhYmVsIHtcbiAgZGlzcGxheTogYmxvY2s7XG4gIGZvbnQtc2l6ZTogMi40cmVtO1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBmb250LWZhbWlseTogXCJJbmRpZSBGbG93ZXJcIiwgY3Vyc2l2ZTtcbiAgbGluZS1oZWlnaHQ6IDE7IH1cblxuLmZvcm0taXRlbV9fdGV4dCB7XG4gIG1hcmdpbi1ib3R0b206IDJyZW07IH1cblxuLyogZmllbGRzICovXG5pbnB1dFt0eXBlPVwidGV4dFwiXSwgdGV4dGFyZWEge1xuICBiYWNrZ3JvdW5kOiAjZmNmNWUzO1xuICBmb250LXNpemU6IDNyZW07XG4gIHRleHQtdHJhbnNmb3JtOiBpbml0aWFsO1xuICBmb250LWZhbWlseTogXCJJbmRpZSBGbG93ZXJcIiwgY3Vyc2l2ZTtcbiAgbGluZS1oZWlnaHQ6IDE7XG4gIGNvbG9yOiAjNDYzMjFEO1xuICB3aWR0aDogMTAwJTtcbiAgcGFkZGluZzogMDtcbiAgcGFkZGluZzogMS41cmVtO1xuICBib3JkZXI6IG5vbmU7XG4gIGJvcmRlci1ib3R0b206IDJweCBzb2xpZCAjMDAwO1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIHRyYW5zaXRpb246IGFsbCAxMDBtcyBlYXNlLW91dDsgfVxuICBpbnB1dFt0eXBlPVwidGV4dFwiXTpob3ZlciwgdGV4dGFyZWE6aG92ZXIsIGlucHV0W3R5cGU9XCJ0ZXh0XCJdOmZvY3VzLCB0ZXh0YXJlYTpmb2N1cyB7XG4gICAgYmFja2dyb3VuZDogI2ZlZmFmMTsgfVxuXG5pbnB1dFt0eXBlPVwidGV4dFwiXSB7XG4gIGhlaWdodDogNC43cmVtO1xuICBwYWRkaW5nLXRvcDogY2FsYygxLjVyZW0gKyA0cHgpO1xuICBwYWRkaW5nLWJvdHRvbTogY2FsYygxLjVyZW0gLSA0cHgpOyB9XG5cbi8qIGdyb3VwaW5ncyAqL1xuLmZpZWxkLWJ1dHRvbi1zdGFjayB7XG4gIHRleHQtYWxpZ246IHJpZ2h0OyB9XG4gIC5maWVsZC1idXR0b24tc3RhY2sgPiBpbnB1dCB7XG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTsgfVxuXG4vKiBwbGFjZWhvbGRlciAqL1xuOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgLyogQ2hyb21lL09wZXJhL1NhZmFyaSAqL1xuICBjb2xvcjogIzlFODY3NDsgfVxuXG46Oi1tb3otcGxhY2Vob2xkZXIge1xuICAvKiBGaXJlZm94IDE5KyAqL1xuICBjb2xvcjogIzlFODY3NDsgfVxuXG46LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgLyogSUUgMTArICovXG4gIGNvbG9yOiAjOUU4Njc0OyB9XG5cbjotbW96LXBsYWNlaG9sZGVyIHtcbiAgLyogRmlyZWZveCAxOC0gKi9cbiAgY29sb3I6ICM5RTg2NzQ7IH1cblxuLnNlbGVjdC13cmFwIHtcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZjZjVlMztcbiAgcGFkZGluZzogMDtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDE7IH1cbiAgLnNlbGVjdC13cmFwIHNlbGVjdCB7XG4gICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gICAgd2lkdGg6IDEwMCU7XG4gICAgZm9udC1zaXplOiAzcmVtO1xuICAgIHRleHQtdHJhbnNmb3JtOiBpbml0aWFsO1xuICAgIGZvbnQtZmFtaWx5OiBcIkluZGllIEZsb3dlclwiLCBjdXJzaXZlO1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgIGhlaWdodDogNC44cmVtO1xuICAgIHBhZGRpbmc6IDAgY2FsYygoMTJweCoyKSAgKyAoMS41cmVtKjIpKSAwIDEuNXJlbTtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgYm9yZGVyOiAycHggc29saWQgIzAwMDtcbiAgICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG4gICAgLW1vei1hcHBlYXJhbmNlOiBub25lOyB9XG4gIC5zZWxlY3Qtd3JhcDpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIHotaW5kZXg6IC0xO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcbiAgICByaWdodDogMS41cmVtO1xuICAgIG1hcmdpbi10b3A6IC03LjVweDtcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICBib3JkZXItdG9wOiAxNXB4IHNvbGlkICM0NjMyMUQ7XG4gICAgYm9yZGVyLWxlZnQ6IDEycHggc29saWQgdHJhbnNwYXJlbnQ7XG4gICAgYm9yZGVyLXJpZ2h0OiAxMnB4IHNvbGlkIHRyYW5zcGFyZW50OyB9XG4gIC5zZWxlY3Qtd3JhcDphZnRlciB7XG4gICAgY29udGVudDogJyc7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gICAgei1pbmRleDogLTI7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogMDtcbiAgICB3aWR0aDogY2FsYygoMjRweCkgKyAoM3JlbSkpO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICBiYWNrZ3JvdW5kOiAjZmNmNWUzO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgIGJvcmRlci1yYWRpdXM6IDNweDsgfVxuICAuc2VsZWN0LXdyYXA6aG92ZXIsIC5zZWxlY3Qtd3JhcDpmb2N1cyB7XG4gICAgYmFja2dyb3VuZDogI2ZlZmFmMTsgfVxuICAgIC5zZWxlY3Qtd3JhcDpob3ZlcjphZnRlciwgLnNlbGVjdC13cmFwOmZvY3VzOmFmdGVyIHtcbiAgICAgIGJhY2tncm91bmQ6ICNmZWZhZjE7IH1cblxuLyogRmlyZWZveCBmaXggKi9cbjotbW96LWFueSguc2VsZWN0LXdyYXApOmJlZm9yZSB7XG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB6LWluZGV4OiAxOyB9XG5cbjotbW96LWFueSguc2VsZWN0LXdyYXApOmFmdGVyIHtcbiAgei1pbmRleDogMDtcbiAgaGVpZ2h0OiBjYWxjKDQuOHJlbSAtIDRweCk7XG4gIHJpZ2h0OiAycHg7XG4gIHRvcDogMnB4OyB9XG5cbi8qIElFIDEwKyBmaXggKi9cbkBtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKSwgKC1tcy1oaWdoLWNvbnRyYXN0OiBub25lKSB7XG4gIC5zZWxlY3Qtd3JhcCBzZWxlY3Q6Oi1tcy1leHBhbmQge1xuICAgIGRpc3BsYXk6IG5vbmU7IH0gfVxuXG4uY2hlY2tib3gtbGFiZWwge1xuICBkaXNwbGF5OiBibG9jaztcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBwYWRkaW5nLWxlZnQ6IDQuNXJlbTtcbiAgY3Vyc29yOiBwb2ludGVyOyB9XG5cbi5jaGVja2JveC1sYWJlbCBpbnB1dCB7XG4gIGhlaWdodDogMXB4ICFpbXBvcnRhbnQ7XG4gIHdpZHRoOiAxcHggIWltcG9ydGFudDtcbiAgb3BhY2l0eTogMDsgfVxuXG4uY2hlY2tib3gtbGFiZWwgLm91dGVyIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIGxlZnQ6IDA7XG4gIHRvcDogY2FsYyg1MCUgLSAwLjFyZW0pO1xuICB3aWR0aDogM3JlbTtcbiAgaGVpZ2h0OiAzcmVtO1xuICBib3JkZXI6IDJweCBzb2xpZCAjMDAwO1xuICBiYWNrZ3JvdW5kOiAjZmNmNWUzO1xuICBib3JkZXItcmFkaXVzOiAzcHg7XG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsgfVxuICAuY2hlY2tib3gtbGFiZWwgLm91dGVyOmhvdmVyLCAuY2hlY2tib3gtbGFiZWwgLm91dGVyOmZvY3VzIHtcbiAgICBiYWNrZ3JvdW5kOiAjZmVmYWYxOyB9XG5cbi5jaGVja2JveC1sYWJlbCAuaW5uZXIge1xuICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gIHRyYW5zZm9ybTogcm90YXRlKDU2ZGVnKSBza2V3KDE2ZGVnKSBzY2FsZSgwLjYpO1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIGhlaWdodDogMi4ycmVtO1xuICB3aWR0aDogMXJlbTtcbiAgbGVmdDogMC44cmVtO1xuICB0b3A6IDBweDtcbiAgYm9yZGVyOiAwLjNyZW0gc29saWQgIzQ2MzIxRDtcbiAgYm9yZGVyLXRvcDogbm9uZTtcbiAgYm9yZGVyLWxlZnQ6IG5vbmU7XG4gIG9wYWNpdHk6IDA7XG4gIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxMDBtcywgb3BhY2l0eSAxMDBtczsgfVxuXG4uY2hlY2tib3gtbGFiZWwgaW5wdXQ6Y2hlY2tlZCArIC5vdXRlciAuaW5uZXIge1xuICB0cmFuc2Zvcm06IHJvdGF0ZSg1NmRlZykgc2tldygxNmRlZykgc2NhbGUoMSk7XG4gIG9wYWNpdHk6IDE7IH1cblxuLnNlYXJjaC13cmFwcGVyIHtcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xuICBtYXJnaW46IDYuNXJlbSBhdXRvIDhyZW07IH1cbiAgLnNlYXJjaC13cmFwcGVyIGltZyB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogNTAlO1xuICAgIGxlZnQ6IDExcHg7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOyB9XG4gIC5zZWFyY2gtd3JhcHBlciBpbnB1dCB7XG4gICAgcGFkZGluZy1sZWZ0OiA1OHB4O1xuICAgIC8qIGltYWdlIHNpemUgKyBzb21lIGV4dHJhKi9cbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDsgfVxuICAgIC5zZWFyY2gtd3JhcHBlciBpbnB1dDpob3ZlciwgLnNlYXJjaC13cmFwcGVyIGlucHV0OmZvY3VzIHtcbiAgICAgIGJhY2tncm91bmQ6ICNmY2YzZTE7IH1cblxuI3NlYXJjaDpmb2N1cyArIGltZyB7XG4gIGFuaW1hdGlvbjogYm9pbmcgNTAwbXMgZWFzZTsgfVxuXG5Aa2V5ZnJhbWVzIGJvaW5nIHtcbiAgZnJvbSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpIHNjYWxlKDEpOyB9XG4gIDQwJSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpIHNjYWxlKDEuMSk7IH1cbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKSBzY2FsZSgxKTsgfSB9XG5cbmJvZHk6bm90KC51c2VyLWlzLXRhYmJpbmcpIGJ1dHRvbjpmb2N1cyxcbmJvZHk6bm90KC51c2VyLWlzLXRhYmJpbmcpIGlucHV0OmZvY3VzLFxuYm9keTpub3QoLnVzZXItaXMtdGFiYmluZykgc2VsZWN0OmZvY3VzLFxuYm9keTpub3QoLnVzZXItaXMtdGFiYmluZykgdGV4dGFyZWE6Zm9jdXMge1xuICBvdXRsaW5lOiBub25lOyB9XG5cbmJvZHkudXNlci1pcy10YWJiaW5nIGJ1dHRvbjpmb2N1cyxcbmJvZHkudXNlci1pcy10YWJiaW5nIGlucHV0OmZvY3VzLFxuYm9keS51c2VyLWlzLXRhYmJpbmcgc2VsZWN0OmZvY3VzLFxuYm9keS51c2VyLWlzLXRhYmJpbmcgdGV4dGFyZWE6Zm9jdXMge1xuICBvdXRsaW5lLWNvbG9yOiAjRkZBMzNFOyB9XG5cbi8qIG9iamVjdHMgKi9cbi5tZWRpYS1ibG9jayBpbWcge1xuICBtYXJnaW46IDEuNXJlbSAwIDAgMDsgfVxuXG4ubWVkaWEtYmxvY2sgPiBkaXYge1xuICBtYXJnaW4tdG9wOiAxLjVyZW07IH1cbiAgLm1lZGlhLWJsb2NrID4gZGl2ID4gKjpmaXJzdC1jaGlsZCB7XG4gICAgbWFyZ2luLXRvcDogMDsgfVxuICAubWVkaWEtYmxvY2sgPiBkaXYgPiAqOmxhc3QtY2hpbGQge1xuICAgIG1hcmdpbi1ib3R0b206IDA7IH1cblxuLm1lZGlhLWJsb2NrIGgyIHtcbiAgbWFyZ2luOiAwO1xuICBsaW5lLWhlaWdodDogMTsgfVxuXG4ubWVkaWEtYmxvY2sgcDpmaXJzdC1vZi10eXBlIHtcbiAgbWFyZ2luLXRvcDogMXJlbTsgfVxuXG4ubWVkaWEtYmxvY2sgcDpsYXN0LW9mLXR5cGUge1xuICBtYXJnaW4tYm90dG9tOiAzcmVtOyB9XG5cbkBtZWRpYSAobWluLXdpZHRoOiA1MDBweCkge1xuICAubWVkaWEtYmxvY2sge1xuICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgYWxpZ24taXRlbXM6IGZsZXgtc3RhcnQ7IH1cbiAgLm1lZGlhLWJsb2NrIGltZyB7XG4gICAgbWFyZ2luOiAwIDNyZW0gMCAwOyB9XG4gIC5tZWRpYS1ibG9jayA+IGRpdiB7XG4gICAgZmxleDogMTtcbiAgICBtYXJnaW4tdG9wOiAwOyB9IH1cblxuLnBhcmFsbGVsLXBhaXItb2YtYnV0dG9ucyB7XG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IH1cbiAgLnBhcmFsbGVsLXBhaXItb2YtYnV0dG9ucyBidXR0b24gKyBidXR0b24ge1xuICAgIG1hcmdpbi10b3A6IDEuNXJlbTsgfVxuXG5AbWVkaWEgKG1pbi13aWR0aDogNTAwcHgpIHtcbiAgLnBhcmFsbGVsLXBhaXItb2YtYnV0dG9ucyB7XG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgfVxuICAgIC5wYXJhbGxlbC1wYWlyLW9mLWJ1dHRvbnMgYnV0dG9uICsgYnV0dG9uIHtcbiAgICAgIG1hcmdpbi10b3A6IDA7IH0gfVxuXG4ubGlzdC1ib3gge1xuICBkaXNwbGF5OiBibG9jaztcbiAgYmFja2dyb3VuZDogI2ZmZjtcbiAgYm9yZGVyOiAzcHggc29saWQgIzAwMDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBwYWRkaW5nOiAzcmVtOyB9XG4gIC5saXN0LWJveCArIC5saXN0LWJveCB7XG4gICAgbWFyZ2luLXRvcDogMy41cmVtOyB9XG5cbi5pbmdyZWRpZW50LWZyYW1lIHtcbiAgYm9yZGVyOiAzcHggc29saWQgIzAwMDtcbiAgYm9yZGVyLXJhZGl1czogM3B4O1xuICBoZWlnaHQ6IDI3MHB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBwYWRkaW5nLWJvdHRvbTogMjRweDtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgYmFja2dyb3VuZDogI0UzQkY5NjtcbiAgLyogT2xkIGJyb3dzZXJzICovXG4gIGJhY2tncm91bmQ6IC1tb3otbGluZWFyLWdyYWRpZW50KHRvcCwgI0UzQkY5NiAwJSwgI0ZCRjVBOCA2NyUsICM2NjQ0MzEgNjclKTtcbiAgLyogRkYzLjYtMTUgKi9cbiAgYmFja2dyb3VuZDogLXdlYmtpdC1saW5lYXItZ3JhZGllbnQodG9wLCAjRTNCRjk2IDAlLCAjRkJGNUE4IDY3JSwgIzY2NDQzMSA2NyUpO1xuICAvKiBDaHJvbWUxMC0yNSxTYWZhcmk1LjEtNiAqL1xuICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQodG8gYm90dG9tLCAjRTNCRjk2IDAlLCAjRkJGNUE4IDY3JSwgIzY2NDQzMSA2NyUpO1xuICAvKiBXM0MsIElFMTArLCBGRjE2KywgQ2hyb21lMjYrLCBPcGVyYTEyKywgU2FmYXJpNysgKi8gfVxuXG4uaW5ncmVkaWVudC1mcmFtZV9faXRlbSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgei1pbmRleDogMDsgfVxuICAuaW5ncmVkaWVudC1mcmFtZV9faXRlbTpiZWZvcmUge1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDk2JTtcbiAgICBsZWZ0OiA1MCU7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGUoLTUwJSwgLTUwJSk7XG4gICAgd2lkdGg6IDMwMHB4O1xuICAgIGhlaWdodDogMTEwcHg7XG4gICAgb3BhY2l0eTogMC42O1xuICAgIGJhY2tncm91bmQ6IC1tb3otcmFkaWFsLWdyYWRpZW50KGNlbnRlciwgZWxsaXBzZSBjb3ZlciwgcmdiYSgwLCAwLCAwLCAwLjkpIDAlLCB0cmFuc3BhcmVudCA0MiUsIHRyYW5zcGFyZW50IDEwMCUpO1xuICAgIC8qIEZGMy42LTE1ICovXG4gICAgYmFja2dyb3VuZDogLXdlYmtpdC1yYWRpYWwtZ3JhZGllbnQoY2VudGVyLCBlbGxpcHNlIGNvdmVyLCByZ2JhKDAsIDAsIDAsIDAuOSkgMCUsIHRyYW5zcGFyZW50IDQyJSwgdHJhbnNwYXJlbnQgMTAwJSk7XG4gICAgLyogQ2hyb21lMTAtMjUsU2FmYXJpNS4xLTYgKi9cbiAgICBiYWNrZ3JvdW5kOiByYWRpYWwtZ3JhZGllbnQoZWxsaXBzZSBhdCBjZW50ZXIsIHJnYmEoMCwgMCwgMCwgMC45KSAwJSwgdHJhbnNwYXJlbnQgNDIlLCB0cmFuc3BhcmVudCAxMDAlKTtcbiAgICAvKiBXM0MsIElFMTArLCBGRjE2KywgQ2hyb21lMjYrLCBPcGVyYTEyKywgU2FmYXJpNysgKi9cbiAgICB6LWluZGV4OiAtMTtcbiAgICBvcGFjaXR5OiAwO1xuICAgIGFuaW1hdGlvbjogZHJvcC1zaGFkb3cgNDAwbXMgZWFzZSAxMTAwbXMgMSBub3JtYWwgZm9yd2FyZHM7IH1cblxuLmluZ3JlZGllbnQtZnJhbWVfX2l0ZW0gPiBpbWcge1xuICBkaXNwbGF5OiBibG9jaztcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0yNTBweCk7XG4gIGFuaW1hdGlvbjogZHJvcC1pbmdyZWRpZW50IDM1MG1zIGVhc2UtaW4gMTAwMG1zIDEgbm9ybWFsIGZvcndhcmRzOyB9XG5cbkBrZXlmcmFtZXMgZHJvcC1pbmdyZWRpZW50IHtcbiAgdG8ge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKTsgfSB9XG5cbkBrZXlmcmFtZXMgZHJvcC1zaGFkb3cge1xuICB0byB7XG4gICAgb3BhY2l0eTogMTsgfSB9XG5cbi5pbmdyZWRpZW50LWxpc3Qge1xuICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7XG4gIHBhZGRpbmc6IDA7IH1cbiAgLmluZ3JlZGllbnQtbGlzdCBsaSB7XG4gICAgZm9udC1zaXplOiAzcmVtO1xuICAgIHRleHQtdHJhbnNmb3JtOiBpbml0aWFsO1xuICAgIGZvbnQtZmFtaWx5OiBcIkluZGllIEZsb3dlclwiLCBjdXJzaXZlO1xuICAgIGxpbmUtaGVpZ2h0OiAxO1xuICAgIG1hcmdpbjogMS4zcmVtIDA7XG4gICAgZGlzcGxheTogZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgfVxuXG4uc3BlZWNoLWJ1YmJsZSB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDtcbiAgYmFja2dyb3VuZC1zaXplOiAxMDAlIDEwMCU7XG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIi4uL2ltYWdlcy9zcGVlY2gtYnViYmxlLXNtYWxsLnN2Z1wiKTsgfVxuXG4uc3BlZWNoX19kaWFsb2d1ZSB7XG4gIG1hcmdpbjogMDtcbiAgZm9udC1zaXplOiAzcmVtO1xuICB0ZXh0LXRyYW5zZm9ybTogaW5pdGlhbDtcbiAgZm9udC1mYW1pbHk6IFwiSW5kaWUgRmxvd2VyXCIsIGN1cnNpdmU7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICBmb250LXNpemU6IDIuOHJlbTtcbiAgaGVpZ2h0OiAyNC41cmVtO1xuICB3aWR0aDogNzAlO1xuICBtYXJnaW4tbGVmdDogMTUlO1xuICBwYWRkaW5nLXRvcDogMTQlOyB9XG5cbi5zcGVlY2hfX2J1dHRvbiB7XG4gIGJvcmRlcjogbm9uZTtcbiAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIHBhZGRpbmc6IDA7XG4gIGRpc3BsYXk6IGlubGluZTtcbiAgYm9yZGVyOiBub25lO1xuICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gIHJpZ2h0OiAxMiU7XG4gIGJvdHRvbTogMTMlO1xuICBvcGFjaXR5OiAxO1xuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDUwMG1zIGVhc2Utb3V0OyB9XG4gIC5zcGVlY2hfX2J1dHRvbjpob3ZlciwgLnNwZWVjaF9fYnV0dG9uOmZvY3VzIHtcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7IH1cbiAgLnNwZWVjaF9fYnV0dG9uIGltZyB7XG4gICAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcbiAgICBhbmltYXRpb246IHN3aW5nLXN0YXIgMS40cyBsaW5lYXIgaW5maW5pdGUgbm9ybWFsIGZvcndhcmRzO1xuICAgIGhlaWdodDogMjVweDsgfVxuICAuc3BlZWNoX19idXR0b246ZGlzYWJsZWQge1xuICAgIG9wYWNpdHk6IDAuODsgfVxuICAgIC5zcGVlY2hfX2J1dHRvbjpkaXNhYmxlZCBpbWcge1xuICAgICAgYW5pbWF0aW9uOiBub25lOyB9XG5cbkBrZXlmcmFtZXMgc3dpbmctc3RhciB7XG4gIDAlLCA1MCUsIDEwMCUge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDApIHNjYWxlKDEpOyB9XG4gIDMwJSB7XG4gICAgdHJhbnNmb3JtOiByb3RhdGUoLTEwZGVnKSBzY2FsZSgxLjA0KTsgfVxuICA4MCUge1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDEwZGVnKSBzY2FsZSgxLjA0KTsgfSB9XG5cbkBtZWRpYSAobWluLXdpZHRoOiA1MDBweCkge1xuICAuc3BlZWNoLWJ1YmJsZSB7XG4gICAgYmFja2dyb3VuZC1pbWFnZTogdXJsKFwiLi4vaW1hZ2VzL3NwZWVjaC1idWJibGUuc3ZnXCIpOyB9XG4gIC5zcGVlY2hfX2RpYWxvZ3VlIHtcbiAgICBmb250LXNpemU6IDNyZW07XG4gICAgaGVpZ2h0OiAyNy43cmVtOyB9XG4gIC5zcGVlY2hfX2J1dHRvbiB7XG4gICAgcmlnaHQ6IDU1cHg7XG4gICAgYm90dG9tOiA1MHB4OyB9XG4gICAgLnNwZWVjaF9fYnV0dG9uIGltZyB7XG4gICAgICBoZWlnaHQ6IGF1dG87IH0gfVxuXG5AbWVkaWEgKG1pbi13aWR0aDogNjUwcHgpIHtcbiAgLnNwZWVjaF9fZGlhbG9ndWUge1xuICAgIHBhZGRpbmctdG9wOiA3LjVyZW07XG4gICAgZm9udC1zaXplOiAzLjVyZW07IH0gfVxuXG4udmlzdWFsbHktaGlkZGVuIHtcbiAgLyogaHR0cHM6Ly9zbm9vay5jYS9hcmNoaXZlcy9odG1sX2FuZF9jc3MvaGlkaW5nLWNvbnRlbnQtZm9yLWFjY2Vzc2liaWxpdHkgKi9cbiAgcG9zaXRpb246IGFic29sdXRlICFpbXBvcnRhbnQ7XG4gIGhlaWdodDogMXB4O1xuICB3aWR0aDogMXB4O1xuICBvdmVyZmxvdzogaGlkZGVuO1xuICBjbGlwOiByZWN0KDFweCwgMXB4LCAxcHgsIDFweCk7IH1cblxuLnRvcC1tYXJnaW4teGwge1xuICBtYXJnaW4tdG9wOiA4cmVtOyB9XG5cbi50b3AtbWFyZ2luLWxnIHtcbiAgbWFyZ2luLXRvcDogNnJlbTsgfVxuXG4udG9wLW1hcmdpbiB7XG4gIG1hcmdpbi10b3A6IDNyZW07IH1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3N0eWxlLnNjc3MiLCJodG1sIHtcclxuICAgIGZvbnQtc2l6ZTogNTAlO1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICAgIEBtZWRpYSAobWluLXdpZHRoOiAkYnJlYWspIHtcclxuICAgICAgICBmb250LXNpemU6IDYyLjUlO1xyXG4gICAgfVxyXG59XHJcblxyXG4qLCAqOmFmdGVyLCAqOmJlZm9yZSB7XHJcbiAgICBib3gtc2l6aW5nOiBpbmhlcml0O1xyXG4gIH1cclxuXHJcbmJvZHkge1xyXG4gICAgYmFja2dyb3VuZDogJGNyZWFtO1xyXG4gICAgZm9udC1mYW1pbHk6ICAkcHJpbWFyeS1mb250O1xyXG4gICAgZm9udC1zaXplOiAkZm9udC1zaXplLWJhc2U7XHJcbiAgICBjb2xvcjogJGJyb3duO1xyXG4gICAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodC1zdGFuZGFyZDtcclxufVxyXG5cclxuLmNvbnRhaW5lciB7XHJcbiAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICB3aWR0aDogNzUwcHg7XHJcbiAgICBtYXJnaW46IDAgYXV0bztcclxuICAgIHBhZGRpbmc6IDAgJGNvbnRhaW5lci1wYWRkaW5nO1xyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19iYXNlLnNjc3MiLCIvLyBDb2xvcnMgXHJcbiRjcmVhbTogI0Y5RUFDQTsgLy8gYmFja2dyb3VuZFxyXG4kZmF0LWZyZWUtY3JlYW06ICNmY2Y1ZTM7IC8vIGZpbGVkc1xyXG4kbW96emFyZWxsYTogI2ZlZmFmMTsgLy8gaG92ZXIgZmllbGRzXHJcblxyXG4kYnJvd246ICM0NjMyMUQ7IC8vIHRleHRcclxuJGR1c3Q6ICM5RTg2NzQ7XHJcbiRwZWJibGU6ICNCOEEyOTk7IC8vIGZvb3RlciB0ZXh0XHJcbiRyZWQ6ICNERjMwMzQ7XHJcbiRyZWRkZXI6IHJnYigyMzUsIDY5LCA3Mik7XHJcbiRvcmFuZ2U6ICNGRkEzM0U7XHJcbiRvcmFuZ2VyOiByZ2IoMjU1LCAxNzgsIDk2KTtcclxuJHllbGxvdzogI2ZmZjU2ODtcclxuJHllbGxvd2VyOiAjZmZmNzhkO1xyXG4gXHJcbiR0YWJsZS1icm93bjogIzY2NDQzMTtcclxuJHdhbGwteWVsbG93OiAjRkJGNUE4OyBcclxuJHdhbGwteWVsbG93LXNoYWRvdzogI0UzQkY5NjtcclxuXHJcbi8vIFNwYWNpbmdcclxuJGVsLXNwYWNpbmctc206IDEuNXJlbTtcclxuJGVsLXNwYWNpbmc6IDNyZW07XHJcbiRlbC1zcGFjaW5nLWxnOiA2cmVtO1xyXG5cclxuJGNvbnRhaW5lci1wYWRkaW5nOiAycmVtO1xyXG4kYmxvY2stbWFyZ2luOiAzLjVyZW07XHJcblxyXG4vLyBGb250XHJcbiRwcmltYXJ5LWZvbnQ6ICdPcGVuIFNhbnMnLCBzYW5zLXNlcmlmO1xyXG4kc2Vjb25kYXJ5LWZvbnQ6ICdJbmRpZSBGbG93ZXInLCBjdXJzaXZlO1xyXG4kZnctbm9ybWFsOiA0MDA7XHJcbiRmdy1ib2xkOiA3MDA7IC8vIG9ubHkgZm9yIG9wZW4gc2Fuc1xyXG4kbGluZS1oZWlnaHQtc3RhbmRhcmQ6IDEuNjtcclxuJGxpbmUtaGVpZ2h0LXNob3J0OiAxO1xyXG5cclxuLy8gRm9udCBTaXplc1xyXG4kZm9udC1zaXplLWJhc2U6IDEuNnJlbTtcclxuJGZvbnQtc2l6ZS1zZWNvbmRhcnk6IDNyZW07XHJcbiRmb250LXNpemUtYnV0dG9uOiAyLjNyZW07XHJcblxyXG4kZm9udC1zaXplLXRpdGxlLWJpZ2dlcjogNXJlbTtcclxuJGZvbnQtc2l6ZS1oMTogNC43cmVtO1xyXG4kZm9udC1zaXplLWgyOiA0cmVtO1xyXG4kZm9udC1zaXplLWgzOiAzLjdyZW07XHJcbiBcclxuLy8gRm9ybSBGaWVsZHNcclxuJGlucHV0LWhlaWdodDogNC43cmVtO1xyXG4kZmllbGQtcGFkZGluZzogMS41cmVtO1xyXG4kZmllbGQtYm9yZGVyLXNpemU6IDJweDtcclxuJGZpZWxkLWJvcmRlcjogJGZpZWxkLWJvcmRlci1zaXplIHNvbGlkICMwMDA7XHJcblxyXG4vLyBBbmltYXRpb25cclxuJHNob3J0LXRyYW5zaXRpb246IDEwMG1zO1xyXG4kdHJhbnNpdGlvbi1lYXNlOiBlYXNlLW91dDtcclxuXHJcbi8vIE90aGVyXHJcbiRib3JkZXItcmFkaXVzOiAzcHg7XHJcbiRicmVhazogNTAwcHg7XHJcbiRicmVhay1sZzogNjUwcHg7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL192YXJpYWJsZXMuc2NzcyIsIi5oZWFkZXIge1xyXG4gICAgbWFyZ2luLXRvcDogNnJlbTtcclxufVxyXG5cclxuLmxvZ28ge1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgPiBzdmcge1xyXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgIG1heC13aWR0aDogMTAwJTtcclxuICAgICAgICBoZWlnaHQ6IGF1dG87XHJcbiAgICB9XHJcbn1cclxuXHJcbi5tYWluIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDE0cmVtO1xyXG59XHJcblxyXG4uZm9vdGVyIHtcclxuICAgIGJhY2tncm91bmQ6ICRicm93bjtcclxuICAgIHBhZGRpbmc6IDJyZW0gMCAxLjVyZW07XHJcbiAgICBjb2xvcjogJHBlYmJsZTtcclxuICAgIGEge1xyXG4gICAgICAgIEBpbmNsdWRlIHJldmVyc2UtbGluay11bmRlcmxpbmUoKTtcclxuICAgICAgICBjb2xvcjogJHBlYmJsZTtcclxuICAgIH1cclxufVxyXG5cclxuLmZvb3Rlci1jb250ZW50IHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG59XHJcblxyXG5AbWVkaWEgKG1pbi13aWR0aDogJGJyZWFrKSB7XHJcbiAgICAubWFpbiB7XHJcbiAgICAgICAgbWluLWhlaWdodDogY2FsYygxMDB2aCAtIDI3NXB4KTsgLy8gMjc1ID0gYXBwcm94aW1hdGUgaGVhZGVyIGhlaWdodFxyXG4gICAgfVxyXG4gICAgXHJcbiAgICAubWFpbi0taG9tZSB7XHJcbiAgICAgICAgbWluLWhlaWdodDogY2FsYygxMDB2aCAtIDk0MHB4KTsgLy8gOTQwID0gYXBwcm94aW1hdGUgaGVhZGVyIGhlaWdodFxyXG4gICAgfVxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3Nhc3Mvc3JjL3Nhc3MvcGFydGlhbHMvX3BhZ2Uuc2NzcyIsIkBtaXhpbiBib3gtYm9yZGVyICgpIHtcclxuICAgIGJvcmRlcjogM3B4IHNvbGlkICMwMDA7XHJcbiAgICBib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cztcclxufVxyXG5cclxuQG1peGluIGJ1dHRvbi10ZXh0ICgpIHtcclxuICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtc2hvcnQ7XHJcbiAgICBmb250LXNpemU6ICRmb250LXNpemUtYnV0dG9uO1xyXG4gICAgZm9udC1mYW1pbHk6ICRzZWNvbmRhcnktZm9udDtcclxufVxyXG5cclxuQG1peGluIHVuLWJ1dHRvbiAoKSB7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgICBkaXNwbGF5OiBpbmxpbmU7XHJcbiAgICBib3JkZXI6IG5vbmU7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTtcclxuICAgICY6aG92ZXIsICY6Zm9jdXMge1xyXG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgIH1cclxufVxyXG5cclxuQG1peGluIG5vdmVsdHktYm9keS10ZXh0ICgpIHtcclxuICAgIGZvbnQtc2l6ZTogJGZvbnQtc2l6ZS1zZWNvbmRhcnk7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogaW5pdGlhbDtcclxuICAgIGZvbnQtZmFtaWx5OiAkc2Vjb25kYXJ5LWZvbnQ7XHJcbiAgICBsaW5lLWhlaWdodDogJGxpbmUtaGVpZ2h0LXNob3J0O1xyXG59XHJcblxyXG5AbWl4aW4gc21hbGwtdGl0bGUgKCkge1xyXG4gICAgZm9udC1zaXplOiAyLjRyZW07XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgZm9udC1mYW1pbHk6ICRzZWNvbmRhcnktZm9udDtcclxuICAgIGxpbmUtaGVpZ2h0OiAkbGluZS1oZWlnaHQtc2hvcnQ7XHJcbn1cclxuXHJcbkBtaXhpbiBjaGlsZC1tYXJnaW4tY2xlYXIgKCkge1xyXG4gICAgJiA+ICo6Zmlyc3QtY2hpbGQge1xyXG4gICAgICAgIG1hcmdpbi10b3A6IDA7XHJcbiAgICB9XHJcbiAgICAmID4gKjpsYXN0LWNoaWxkIHtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAwO1xyXG4gICAgfVxyXG59XHJcbkBtaXhpbiByZXZlcnNlLWxpbmstdW5kZXJsaW5lICgpIHtcclxuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICY6aG92ZXIsICY6Zm9jdXMge1xyXG4gICAgICAgIHRleHQtZGVjb3JhdGlvbjogdW5kZXJsaW5lO1xyXG4gICAgfVxyXG59XHJcblxyXG5AbWl4aW4gZnJhbWVHcmFkaWVudCAoKSB7XHJcbiAgICBiYWNrZ3JvdW5kOiAkd2FsbC15ZWxsb3ctc2hhZG93OyAvKiBPbGQgYnJvd3NlcnMgKi9cclxuICAgIGJhY2tncm91bmQ6IC1tb3otbGluZWFyLWdyYWRpZW50KHRvcCwgJHdhbGwteWVsbG93LXNoYWRvdyAwJSwgJHdhbGwteWVsbG93IDY3JSwgJHRhYmxlLWJyb3duIDY3JSk7IC8qIEZGMy42LTE1ICovXHJcbiAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LWxpbmVhci1ncmFkaWVudCh0b3AsICR3YWxsLXllbGxvdy1zaGFkb3cgMCUsJHdhbGwteWVsbG93IDY3JSwkdGFibGUtYnJvd24gNjclKTsgLyogQ2hyb21lMTAtMjUsU2FmYXJpNS4xLTYgKi9cclxuICAgIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBib3R0b20sICR3YWxsLXllbGxvdy1zaGFkb3cgMCUsJHdhbGwteWVsbG93IDY3JSwkdGFibGUtYnJvd24gNjclKTsgLyogVzNDLCBJRTEwKywgRkYxNissIENocm9tZTI2KywgT3BlcmExMissIFNhZmFyaTcrICovXHJcbn1cclxuXHJcbkBtaXhpbiBzaGFkb3dHcmFkaWVudCAoKSB7XHJcbiAgICBiYWNrZ3JvdW5kOiAtbW96LXJhZGlhbC1ncmFkaWVudChjZW50ZXIsIGVsbGlwc2UgY292ZXIsIHJnYmEoMCwwLDAsMC45KSAwJSwgcmdiYSgwLDAsMCwwKSA0MiUsIHJnYmEoMCwwLDAsMCkgMTAwJSk7IC8qIEZGMy42LTE1ICovXHJcbiAgICBiYWNrZ3JvdW5kOiAtd2Via2l0LXJhZGlhbC1ncmFkaWVudChjZW50ZXIsIGVsbGlwc2UgY292ZXIsIHJnYmEoMCwwLDAsMC45KSAwJSxyZ2JhKDAsMCwwLDApIDQyJSxyZ2JhKDAsMCwwLDApIDEwMCUpOyAvKiBDaHJvbWUxMC0yNSxTYWZhcmk1LjEtNiAqL1xyXG4gICAgYmFja2dyb3VuZDogcmFkaWFsLWdyYWRpZW50KGVsbGlwc2UgYXQgY2VudGVyLCByZ2JhKDAsMCwwLDAuOSkgMCUscmdiYSgwLDAsMCwwKSA0MiUscmdiYSgwLDAsMCwwKSAxMDAlKTsgLyogVzNDLCBJRTEwKywgRkYxNissIENocm9tZTI2KywgT3BlcmExMissIFNhZmFyaTcrICovXHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fbWl4aW5zLnNjc3MiLCIvKiBpbnNwaXJlZCBieSBodHRwczovL2NvZGVwZW4uaW8vZmlubmh2bWFuL3Blbi9NUXlKeFYvICovXHJcbiVidXR0b24tYmFzZSB7XHJcbiAgICBAaW5jbHVkZSBidXR0b24tdGV4dCgpO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgYm9yZGVyLXJhZGl1czogJGJvcmRlci1yYWRpdXM7XHJcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICBwYWRkaW5nOiAxcmVtIDEuN3JlbTtcclxuICAgIGNvbG9yOiAjMDAwO1xyXG4gICAgYm9yZGVyOiAycHggc29saWQgIzAwMDtcclxuICAgIGJvcmRlci10b3A6IG5vbmU7XHJcbiAgICBib3JkZXItbGVmdDogbm9uZTtcclxuICAgIHRyYW5zaXRpb246IGJveC1zaGFkb3cgJHNob3J0LXRyYW5zaXRpb24gZWFzZS1vdXQ7XHJcbiAgICAmOmhvdmVyLCAmOmZvY3VzIHtcclxuICAgICAgICBib3gtc2hhZG93OiAxcHggMXB4IDAgIzAwMDtcclxuICAgIH1cclxuICAgICY6YWN0aXZlIHtcclxuICAgICAgICBib3gtc2hhZG93OiAycHggMnB4IDAgIzAwMDtcclxuICAgIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19idXR0b24tYmFzZS5zY3NzIiwiXHJcbi8qIHR5cGVzIG9mIGJ1dHRvbnMgKi9cclxuLmJ1dHRvbiB7XHJcbiAgICBAZXh0ZW5kICVidXR0b24tYmFzZTtcclxuICAgIGJhY2tncm91bmQ6ICR5ZWxsb3c7XHJcbiAgICAmOmhvdmVyLCAmOmZvY3VzIHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAkeWVsbG93ZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIHN0b3AgbG9va2luZyBsaWtlIGEgYnV0dG9uIGV2ZW4gdGhvdWdoIHlvdSBpc1xyXG4udW4tYnV0dG9uIHtcclxuICAgIEBpbmNsdWRlIGJ1dHRvbi10ZXh0KCk7XHJcbiAgICBAaW5jbHVkZSB1bi1idXR0b24oKTtcclxuICAgIGZvbnQtc2l6ZTogJGZvbnQtc2l6ZS1idXR0b247XHJcbn1cclxuXHJcbi8qIG1vZGlmaWVycyAqL1xyXG5cclxuLmJ1dHRvbi0taW1wb3J0YW50IHtcclxuICAgIGJhY2tncm91bmQ6ICRvcmFuZ2U7XHJcbiAgICAmOmhvdmVyLCAmOmZvY3VzIHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAkb3JhbmdlcjtcclxuICAgIH1cclxufVxyXG5cclxuLmJ1dHRvbi0tZGFuZ2VyIHtcclxuICAgIGJhY2tncm91bmQ6ICRyZWQ7XHJcbiAgICBjb2xvcjogI2ZmZjtcclxuICAgICY6aG92ZXIsICY6Zm9jdXMge1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICRyZWRkZXI7XHJcbiAgICB9XHJcbn1cclxuXHJcbi5idXR0b24tLWxhcmdlIHtcclxuICAgIHBhZGRpbmc6IDEuM3JlbSAyLjFyZW07XHJcbiAgICBmb250LXNpemU6ICRmb250LXNpemUtc2Vjb25kYXJ5O1xyXG59XHJcblxyXG4udW4tYnV0dG9uLS1kYW5nZXIge1xyXG4gICAgY29sb3I6ICRyZWQ7XHJcbiAgICAmOmhvdmVyLCAmOmZvY3VzIHtcclxuICAgICAgICBjb2xvcjogJHJlZGRlcjtcclxuICAgIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19idXR0b25zLnNjc3MiLCJhIHtcclxuICAgIGNvbG9yOiAkYnJvd247XHJcbiAgICAmOmhvdmVyLCAmOmZvY3VzIHtcclxuICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XHJcbiAgICB9XHJcbn1cclxuXHJcbi5yZXZlcnNlLWxpbmstdW5kZXJsaW5lIHtcclxuICAgIEBpbmNsdWRlIHJldmVyc2UtbGluay11bmRlcmxpbmUoKTtcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19saW5rcy5zY3NzIiwiLmxpbmstbGlzdCB7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgbWFyZ2luOiAwO1xyXG4gICAgbGlzdC1zdHlsZTogbm9uZTtcclxuICAgIGRpc3BsYXk6IGlubGluZTtcclxuICAgID4gbGkge1xyXG4gICAgICAgIGRpc3BsYXk6IGlubGluZTtcclxuICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICB9XHJcbiAgICBsaSArIGxpOmJlZm9yZSB7XHJcbiAgICAgICAgY29udGVudDogJ3wgJztcclxuICAgIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19saXN0cy5zY3NzIiwiaDEsIGgyLCBoMywgaDQsIGg1LCBoNiB7XHJcbiAgICBjb2xvcjogJGJyb3duXHJcbn1cclxuXHJcbmgxLCBoMiwgaDMge1xyXG4gICAgZm9udC1mYW1pbHk6ICRzZWNvbmRhcnktZm9udDtcclxuICAgIGZvbnQtd2VpZ2h0OiAkZnctbm9ybWFsO1xyXG4gICAgbGluZS1oZWlnaHQ6ICRsaW5lLWhlaWdodC1zaG9ydDtcclxuICAgIG1hcmdpbjogJGVsLXNwYWNpbmctbGcgMCAkZWwtc3BhY2luZy1zbTtcclxufVxyXG5cclxuaDQsIGg1LCBoNiB7XHJcbiAgICBmb250LXdlaWdodDogJGZ3LWJvbGQ7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgbWFyZ2luOiAkZWwtc3BhY2luZy1zbSAwO1xyXG59XHJcblxyXG5oMSB7XHJcbiAgICBmb250LXNpemU6ICRmb250LXNpemUtaDE7XHJcbn1cclxuXHJcbmgyIHtcclxuICAgIGZvbnQtc2l6ZTogJGZvbnQtc2l6ZS1oMjtcclxufVxyXG5cclxuaDMge1xyXG4gICAgZm9udC1zaXplOiAkZm9udC1zaXplLWgzO1xyXG59XHJcblxyXG5wIHtcclxuICAgIG1hcmdpbjogJGVsLXNwYWNpbmctc20gMDtcclxufVxyXG5cclxuLnRleHQtY2VudGVyIHtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLnRpdGxlLWJpZ2dlciB7XHJcbiAgICBmb250LXNpemU6ICRmb250LXNpemUtdGl0bGUtYmlnZ2VyO1xyXG59XHJcblxyXG4ubm92ZWx0eS1ib2R5LXRleHQge1xyXG4gICAgQGluY2x1ZGUgbm92ZWx0eS1ib2R5LXRleHQ7XHJcbn1cclxuXHJcbi5wbHVzLW9uZS1zcGFjZXIge1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgd2lkdGg6IDAuM3JlbTtcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL190ZXh0LnNjc3MiLCIuZm9ybS1pdGVtIHtcclxuICAgIG1hcmdpbjogJGVsLXNwYWNpbmctbGcgMCAwO1xyXG59XHJcblxyXG4uZm9ybS1pdGVtLXNob3J0IHtcclxuICAgIG1hcmdpbjogJGVsLXNwYWNpbmcgMCAwO1xyXG59XHJcblxyXG4vKiBsYWJlbHMgKi9cclxuXHJcbi5mb3JtLWl0ZW0gPiBsYWJlbCB7XHJcbiAgICBkaXNwbGF5OiBibG9jaztcclxuICAgIEBpbmNsdWRlIHNtYWxsLXRpdGxlKCk7XHJcbn1cclxuXHJcbi5mb3JtLWl0ZW1fX3RleHQge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMnJlbTtcclxufVxyXG5cclxuLyogZmllbGRzICovXHJcblxyXG4lZmllbGQtYmFzZSB7XHJcbiAgICBiYWNrZ3JvdW5kOiAkZmF0LWZyZWUtY3JlYW07XHJcbiAgICBAaW5jbHVkZSBub3ZlbHR5LWJvZHktdGV4dCgpO1xyXG4gICAgY29sb3I6ICRicm93bjtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIHBhZGRpbmc6ICRmaWVsZC1wYWRkaW5nO1xyXG4gICAgYm9yZGVyOiBub25lO1xyXG4gICAgYm9yZGVyLWJvdHRvbTogJGZpZWxkLWJvcmRlcjtcclxuICAgIGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzO1xyXG4gICAgdHJhbnNpdGlvbjogYWxsICRzaG9ydC10cmFuc2l0aW9uICR0cmFuc2l0aW9uLWVhc2U7XHJcbiAgICAmOmhvdmVyLCAmOmZvY3VzIHtcclxuICAgICAgICBiYWNrZ3JvdW5kOiAkbW96emFyZWxsYTtcclxuICAgIH1cclxuICAgIC8vICY6Zm9jdXMge1xyXG4gICAgLy8gICAgIGJvcmRlci1jb2xvcjogJG9yYW5nZTtcclxuICAgIC8vIH1cclxufVxyXG5cclxuaW5wdXRbdHlwZT1cInRleHRcIl0ge1xyXG4gICAgJHNwYWNlLWFkanVzdDogNHB4O1xyXG4gICAgQGV4dGVuZCAlZmllbGQtYmFzZTtcclxuICAgIGhlaWdodDogJGlucHV0LWhlaWdodDtcclxuICAgIHBhZGRpbmctdG9wOiBjYWxjKCN7JGZpZWxkLXBhZGRpbmd9ICsgI3skc3BhY2UtYWRqdXN0fSk7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogY2FsYygjeyRmaWVsZC1wYWRkaW5nfSAtICN7JHNwYWNlLWFkanVzdH0pO1xyXG59XHJcblxyXG50ZXh0YXJlYSB7XHJcbiAgICBAZXh0ZW5kICVmaWVsZC1iYXNlO1xyXG59XHJcblxyXG4vKiBncm91cGluZ3MgKi9cclxuXHJcbi5maWVsZC1idXR0b24tc3RhY2sge1xyXG4gICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICA+IGlucHV0IHtcclxuICAgICAgICBtYXJnaW4tYm90dG9tOiAycmVtO1xyXG4gICAgfVxyXG59XHJcblxyXG4vKiBwbGFjZWhvbGRlciAqL1xyXG5cclxuOjotd2Via2l0LWlucHV0LXBsYWNlaG9sZGVyIHsgLyogQ2hyb21lL09wZXJhL1NhZmFyaSAqL1xyXG4gICAgY29sb3I6ICRkdXN0O1xyXG4gIH1cclxuICA6Oi1tb3otcGxhY2Vob2xkZXIgeyAvKiBGaXJlZm94IDE5KyAqL1xyXG4gICAgY29sb3I6ICRkdXN0O1xyXG4gIH1cclxuICA6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHsgLyogSUUgMTArICovXHJcbiAgICBjb2xvcjogJGR1c3Q7XHJcbiAgfVxyXG4gIDotbW96LXBsYWNlaG9sZGVyIHsgLyogRmlyZWZveCAxOC0gKi9cclxuICAgIGNvbG9yOiAkZHVzdDtcclxuICB9XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3Nhc3Mvc3JjL3Nhc3MvcGFydGlhbHMvX2Zvcm1zLnNjc3MiLCIkaGVpZ2h0OiA0LjhyZW07XHJcbiRhcnJvdy13aWR0aDogMTJweDtcclxuJGFycm93LWhlaWdodDogMTVweDtcclxuXHJcbi5zZWxlY3Qtd3JhcCB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogJGZhdC1mcmVlLWNyZWFtO1xyXG4gIHBhZGRpbmc6IDA7XHJcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICB6LWluZGV4OiAxO1xyXG4gIFxyXG4gIHNlbGVjdCB7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICBib3gtc2hhZG93OiBub25lO1xyXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIEBpbmNsdWRlIG5vdmVsdHktYm9keS10ZXh0KCk7XHJcbiAgICBoZWlnaHQ6ICRoZWlnaHQ7XHJcbiAgICBwYWRkaW5nOiAwIGNhbGMoKCN7JGFycm93LXdpZHRofSoyKSAgKyAoI3skZmllbGQtcGFkZGluZ30qMikpIDAgJGZpZWxkLXBhZGRpbmc7XHJcbiAgICBib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cztcclxuICAgIGJvcmRlcjogJGZpZWxkLWJvcmRlcjtcclxuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcclxuICAgIC1tb3otYXBwZWFyYW5jZTogbm9uZTtcclxuXHJcbiAgICBcclxuICB9XHJcblxyXG4gICY6YmVmb3JlIHtcclxuICAgIGNvbnRlbnQ6ICcnO1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICB6LWluZGV4OiAtMTtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogNTAlOyAgICBcclxuICAgIHJpZ2h0OiAkZmllbGQtcGFkZGluZztcclxuICAgIG1hcmdpbi10b3A6IC0oJGFycm93LWhlaWdodC8yKTsgXHJcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxuICAgIGJvcmRlci10b3A6ICRhcnJvdy1oZWlnaHQgc29saWQgJGJyb3duO1xyXG4gICAgYm9yZGVyLWxlZnQ6ICRhcnJvdy13aWR0aCBzb2xpZCB0cmFuc3BhcmVudDtcclxuICAgIGJvcmRlci1yaWdodDogJGFycm93LXdpZHRoIHNvbGlkIHRyYW5zcGFyZW50O1xyXG4gIH1cclxuXHJcbiAgJjphZnRlciB7XHJcbiAgICBjb250ZW50OiAnJztcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgei1pbmRleDogLTI7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICB0b3A6IDA7XHJcbiAgICByaWdodDogMDtcclxuICAgIHdpZHRoOiBjYWxjKCgjeyRhcnJvdy13aWR0aCoyfSkgKyAoI3skZmllbGQtcGFkZGluZyoyfSkpO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZDogJGZhdC1mcmVlLWNyZWFtO1xyXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICBib3JkZXItcmFkaXVzOiAkYm9yZGVyLXJhZGl1cztcclxuICB9XHJcblxyXG4gICY6aG92ZXIsICY6Zm9jdXMge1xyXG4gICAgYmFja2dyb3VuZDogJG1venphcmVsbGE7XHJcbiAgICAmOmFmdGVyIHtcclxuICAgICAgYmFja2dyb3VuZDogJG1venphcmVsbGE7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG4vKiBGaXJlZm94IGZpeCAqL1xyXG46LW1vei1hbnkoLnNlbGVjdC13cmFwKXtcclxuICAmOmJlZm9yZSB7XHJcbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTsgXHJcbiAgICB6LWluZGV4OiAxO1xyXG4gIH1cclxuICAmOmFmdGVyIHtcclxuICAgIHotaW5kZXg6IDA7XHJcbiAgICBoZWlnaHQ6IGNhbGMoI3skaGVpZ2h0fSAtIDRweCk7XHJcbiAgICByaWdodDogMnB4O1xyXG4gICAgdG9wOiAycHg7XHJcbiAgfVxyXG59XHJcblxyXG4vKiBJRSAxMCsgZml4ICovXHJcbkBtZWRpYSBzY3JlZW4gYW5kICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKSwgKC1tcy1oaWdoLWNvbnRyYXN0OiBub25lKSB7XHJcbiAgLnNlbGVjdC13cmFwIHNlbGVjdDo6LW1zLWV4cGFuZCB7XHJcbiAgICBkaXNwbGF5OiBub25lO1xyXG4gIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19mb3JtLXNlbGVjdC5zY3NzIiwiJGNoZWNrYm94LXNpemU6IDNyZW07XHJcblxyXG4uY2hlY2tib3gtbGFiZWwge1xyXG4gICAgZGlzcGxheTogYmxvY2s7XHJcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICBwYWRkaW5nLWxlZnQ6ICgkY2hlY2tib3gtc2l6ZSArIDEuNXJlbSk7XHJcbiAgICBjdXJzb3I6IHBvaW50ZXI7XHJcbn1cclxuXHJcbi5jaGVja2JveC1sYWJlbCBpbnB1dCB7XHJcbiAgICBoZWlnaHQ6IDFweCFpbXBvcnRhbnQ7XHJcbiAgICB3aWR0aDogMXB4IWltcG9ydGFudDtcclxuICAgIG9wYWNpdHk6IDA7XHJcbn1cclxuXHJcbi5jaGVja2JveC1sYWJlbCAub3V0ZXIge1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHRvcDogY2FsYyg1MCUgLSAwLjFyZW0pO1xyXG4gICAgd2lkdGg6ICRjaGVja2JveC1zaXplO1xyXG4gICAgaGVpZ2h0OiAkY2hlY2tib3gtc2l6ZTtcclxuICAgIGJvcmRlcjogJGZpZWxkLWJvcmRlcjtcclxuICAgIGJhY2tncm91bmQ6ICRmYXQtZnJlZS1jcmVhbTtcclxuICAgIGJvcmRlci1yYWRpdXM6ICRib3JkZXItcmFkaXVzO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xyXG5cclxuICAgICY6aG92ZXIsICY6Zm9jdXMge1xyXG4gICAgICAgIGJhY2tncm91bmQ6ICRtb3p6YXJlbGxhO1xyXG4gICAgfVxyXG59XHJcblxyXG4uY2hlY2tib3gtbGFiZWwgLmlubmVyIHtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRyYW5zZm9ybTogcm90YXRlKDU2ZGVnKSBza2V3KDE2ZGVnKSBzY2FsZSgwLjYpO1xyXG4gICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xyXG4gICAgaGVpZ2h0OiAyLjJyZW07XHJcbiAgICB3aWR0aDogMXJlbTtcclxuICAgIGxlZnQ6IDAuOHJlbTtcclxuICAgIHRvcDogMHB4O1xyXG4gICAgYm9yZGVyOiAwLjNyZW0gc29saWQgJGJyb3duO1xyXG4gICAgYm9yZGVyLXRvcDogbm9uZTtcclxuICAgIGJvcmRlci1sZWZ0OiBub25lO1xyXG4gICAgb3BhY2l0eTogMDtcclxuICAgIHRyYW5zaXRpb246IHRyYW5zZm9ybSAxMDBtcywgb3BhY2l0eSAxMDBtcztcclxufSBcclxuXHJcbi5jaGVja2JveC1sYWJlbCBpbnB1dDpjaGVja2VkKy5vdXRlciAuaW5uZXIge1xyXG4gICAgdHJhbnNmb3JtOiByb3RhdGUoNTZkZWcpIHNrZXcoMTZkZWcpIHNjYWxlKDEpO1xyXG4gICAgb3BhY2l0eTogMTtcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19mb3JtLWNoZWNrYm94LnNjc3MiLCIuc2VhcmNoLXdyYXBwZXIge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgbWFyZ2luOiA2LjVyZW0gYXV0byA4cmVtO1xyXG5cclxuICAgIGltZyB7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogNTAlO1xyXG4gICAgICAgIGxlZnQ6IDExcHg7XHJcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlucHV0IHtcclxuICAgICAgICBwYWRkaW5nLWxlZnQ6IDU4cHg7IC8qIGltYWdlIHNpemUgKyBzb21lIGV4dHJhKi9cclxuICAgICAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuXHJcbiAgICAgICAgJjpob3ZlciwgJjpmb2N1cyB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6IGxpZ2h0ZW4oJGNyZWFtLCA1KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiNzZWFyY2g6Zm9jdXMgKyBpbWcge1xyXG4gICAgYW5pbWF0aW9uOiBib2luZyA1MDBtcyBlYXNlO1xyXG59XHJcblxyXG5Aa2V5ZnJhbWVzIGJvaW5nIHtcclxuICAgIGZyb20ge1xyXG4gICAgICAgIHRyYW5zZm9ybTogIHRyYW5zbGF0ZVkoLTUwJSkgc2NhbGUoMSk7XHJcbiAgICB9XHJcbiAgICA0MCUge1xyXG4gICAgICAgIHRyYW5zZm9ybTogIHRyYW5zbGF0ZVkoLTUwJSkgc2NhbGUoMS4xKTtcclxuICAgIH1cclxuICAgIHRvIHtcclxuICAgICAgICB0cmFuc2Zvcm06ICB0cmFuc2xhdGVZKC01MCUpIHNjYWxlKDEpO1xyXG4gICAgfSBcclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19mb3JtLXNlYXJjaC5zY3NzIiwiYm9keTpub3QoLnVzZXItaXMtdGFiYmluZykge1xyXG4gICAgYnV0dG9uOmZvY3VzLFxyXG4gICAgaW5wdXQ6Zm9jdXMsXHJcbiAgICBzZWxlY3Q6Zm9jdXMsXHJcbiAgICB0ZXh0YXJlYTpmb2N1cyB7XHJcbiAgICAgICAgb3V0bGluZTogbm9uZTtcclxuICAgIH1cclxufVxyXG5cclxuYm9keS51c2VyLWlzLXRhYmJpbmcge1xyXG4gICAgYnV0dG9uOmZvY3VzLFxyXG4gICAgaW5wdXQ6Zm9jdXMsXHJcbiAgICBzZWxlY3Q6Zm9jdXMsXHJcbiAgICB0ZXh0YXJlYTpmb2N1cyB7XHJcbiAgICAgICAgb3V0bGluZS1jb2xvcjogJG9yYW5nZTtcclxuICAgIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19mb2N1cy1yaW5nLWZpeC5zY3NzIiwiLm1lZGlhLWJsb2NrIGltZyB7XHJcbiAgbWFyZ2luOiAkZWwtc3BhY2luZy1zbSAwIDAgMDtcclxufVxyXG5cclxuLm1lZGlhLWJsb2NrID4gZGl2IHtcclxuICBAaW5jbHVkZSBjaGlsZC1tYXJnaW4tY2xlYXI7XHJcbiAgbWFyZ2luLXRvcDogJGVsLXNwYWNpbmctc207XHJcbn1cclxuXHJcbi5tZWRpYS1ibG9jayBoMiB7XHJcbiAgbWFyZ2luOiAwO1xyXG4gIGxpbmUtaGVpZ2h0OiAxO1xyXG59XHJcblxyXG4ubWVkaWEtYmxvY2sgcCB7XHJcbiAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgIG1hcmdpbi10b3A6IDFyZW07XHJcbiAgfVxyXG4gICY6bGFzdC1vZi10eXBlIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDNyZW07XHJcbiAgfVxyXG59XHJcblxyXG5AbWVkaWEgKG1pbi13aWR0aDogJGJyZWFrKSB7XHJcbiAgXHJcbiAgLm1lZGlhLWJsb2NrIHtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcclxuICB9XHJcbiAgXHJcbiAgLm1lZGlhLWJsb2NrIGltZyB7XHJcbiAgICBtYXJnaW46IDAgJGVsLXNwYWNpbmcgMCAwO1xyXG4gIH1cclxuXHJcbiAgLm1lZGlhLWJsb2NrID4gZGl2IHtcclxuICAgIGZsZXg6IDE7XHJcbiAgICBtYXJnaW4tdG9wOiAwO1xyXG4gIH1cclxuXHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fbWVkaWEtYmxvY2suc2NzcyIsIi5wYXJhbGxlbC1wYWlyLW9mLWJ1dHRvbnMge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBcclxuICAgIGJ1dHRvbiArIGJ1dHRvbiB7XHJcbiAgICAgICAgbWFyZ2luLXRvcDogJGVsLXNwYWNpbmctc207XHJcbiAgICB9XHJcbn1cclxuXHJcbkBtZWRpYSAobWluLXdpZHRoOiAkYnJlYWspIHtcclxuXHJcbiAgICAucGFyYWxsZWwtcGFpci1vZi1idXR0b25zIHtcclxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xyXG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG5cclxuICAgICAgICBidXR0b24gKyBidXR0b24ge1xyXG4gICAgICAgICAgICBtYXJnaW4tdG9wOiAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fYnV0dG9uLWdyb3Vwcy5zY3NzIiwiLmxpc3QtYm94IHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgYmFja2dyb3VuZDogI2ZmZjtcclxuICAgIEBpbmNsdWRlIGJveC1ib3JkZXIoKTtcclxuICAgIHBhZGRpbmc6IDNyZW07XHJcbiAgICBcclxuICAgICYgKyAubGlzdC1ib3gge1xyXG4gICAgICAgIG1hcmdpbi10b3A6ICRibG9jay1tYXJnaW47XHJcbiAgICB9XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fbGlzdC1ib3guc2NzcyIsIi5pbmdyZWRpZW50LWZyYW1lIHtcclxuICAgIEBpbmNsdWRlIGJveC1ib3JkZXIoKTtcclxuICAgIGhlaWdodDogMjcwcHg7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgcGFkZGluZy1ib3R0b206IDI0cHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBAaW5jbHVkZSBmcmFtZUdyYWRpZW50KCk7XHJcbn1cclxuXHJcbi5pbmdyZWRpZW50LWZyYW1lX19pdGVtIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIHotaW5kZXg6IDA7XHJcbiAgICAmOmJlZm9yZSB7XHJcbiAgICAgICAgY29udGVudDogJyc7XHJcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgICAgIHRvcDogOTYlO1xyXG4gICAgICAgIGxlZnQ6IDUwJTtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcclxuICAgICAgICB3aWR0aDogMzAwcHg7XHJcbiAgICAgICAgaGVpZ2h0OiAxMTBweDtcclxuICAgICAgICBvcGFjaXR5OiAwLjY7XHJcbiAgICAgICAgQGluY2x1ZGUgc2hhZG93R3JhZGllbnQoKTtcclxuICAgICAgICB6LWluZGV4OiAtMTtcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIGFuaW1hdGlvbjogZHJvcC1zaGFkb3cgNDAwbXMgZWFzZSAxMTAwbXMgMSBub3JtYWwgZm9yd2FyZHM7XHJcbiAgICB9XHJcbn1cclxuXHJcbi5pbmdyZWRpZW50LWZyYW1lX19pdGVtID4gaW1nIHtcclxuICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0yNTBweCk7XHJcbiAgICBhbmltYXRpb246IGRyb3AtaW5ncmVkaWVudCAzNTBtcyBlYXNlLWluIDEwMDBtcyAxIG5vcm1hbCBmb3J3YXJkcztcclxufVxyXG5cclxuQGtleWZyYW1lcyBkcm9wLWluZ3JlZGllbnQge1xyXG4gICAgdG8ge1xyXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgwKVxyXG4gICAgfVxyXG59XHJcblxyXG5Aa2V5ZnJhbWVzIGRyb3Atc2hhZG93IHtcclxuICAgIHRvIHtcclxuICAgICAgICBvcGFjaXR5OiAxO1xyXG4gICAgfVxyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3Nhc3Mvc3JjL3Nhc3MvcGFydGlhbHMvX2luZ3JlZGllbnQtZnJhbWUuc2NzcyIsIi5pbmdyZWRpZW50LWxpc3Qge1xyXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xyXG4gICAgcGFkZGluZzogMDtcclxuXHJcbiAgICBsaSB7XHJcbiAgICAgICAgQGluY2x1ZGUgbm92ZWx0eS1ib2R5LXRleHQoKTtcclxuICAgICAgICBtYXJnaW46IDEuM3JlbSAwO1xyXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgICB9XHJcblxyXG59XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19pbmdyZWRpZW50LWxpc3Quc2NzcyIsIi5zcGVlY2gtYnViYmxlIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgICBiYWNrZ3JvdW5kLXNpemU6IDEwMCUgMTAwJTtcclxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vaW1hZ2VzL3NwZWVjaC1idWJibGUtc21hbGwuc3ZnJyk7XHJcbn1cclxuXHJcbi5zcGVlY2hfX2RpYWxvZ3VlIHtcclxuICAgIG1hcmdpbjogMDtcclxuICAgIEBpbmNsdWRlIG5vdmVsdHktYm9keS10ZXh0KCk7XHJcbiAgICBmb250LXNpemU6IDIuOHJlbTtcclxuICAgIGhlaWdodDogMjQuNXJlbTtcclxuICAgIHdpZHRoOiA3MCU7XHJcbiAgICBtYXJnaW4tbGVmdDogMTUlO1xyXG4gICAgcGFkZGluZy10b3A6IDE0JTtcclxufVxyXG5cclxuLnNwZWVjaF9fYnV0dG9uIHtcclxuICAgICRzaG9ydC10cmFuc2l0aW9uOiA1MDBtcztcclxuICAgIEBpbmNsdWRlIHVuLWJ1dHRvbigpO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xyXG4gICAgLy8gcmlnaHQ6IDM4cHg7XHJcbiAgICByaWdodDogMTIlO1xyXG4gICAgYm90dG9tOiAxMyU7XHJcbiAgICAvLyBib3R0b206IDI0cHhcclxuICAgIG9wYWNpdHk6IDE7XHJcbiAgICB0cmFuc2l0aW9uOiBvcGFjaXR5ICRzaG9ydC10cmFuc2l0aW9uICR0cmFuc2l0aW9uLWVhc2U7XHJcblxyXG4gICAgaW1nIHtcclxuICAgICAgICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xyXG4gICAgICAgIGFuaW1hdGlvbjogc3dpbmctc3RhciAxLjRzIGxpbmVhciBpbmZpbml0ZSBub3JtYWwgZm9yd2FyZHM7XHJcbiAgICAgICAgaGVpZ2h0OiAyNXB4O1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAmOmRpc2FibGVkIHtcclxuICAgICAgICBvcGFjaXR5OiAwLjg7XHJcbiAgICAgICAgaW1nIHtcclxuICAgICAgICAgICAgYW5pbWF0aW9uOiBub25lO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuQGtleWZyYW1lcyBzd2luZy1zdGFyIHtcclxuICAgIDAlLCA1MCUsIDEwMCUge1xyXG4gICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDApIHNjYWxlKDEpO1xyXG4gICAgfVxyXG4gICAgMzAlIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgtMTBkZWcpIHNjYWxlKDEuMDQpO1xyXG4gICAgfVxyXG4gICAgODAlIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxMGRlZykgc2NhbGUoMS4wNCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbkBtZWRpYSAobWluLXdpZHRoOiAkYnJlYWspIHtcclxuICAgIC5zcGVlY2gtYnViYmxlIHtcclxuICAgICAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoJy4uL2ltYWdlcy9zcGVlY2gtYnViYmxlLnN2ZycpO1xyXG4gICAgfVxyXG5cclxuICAgIC5zcGVlY2hfX2RpYWxvZ3VlIHtcclxuICAgICAgICBmb250LXNpemU6ICRmb250LXNpemUtc2Vjb25kYXJ5O1xyXG4gICAgICAgIGhlaWdodDogMjcuN3JlbTtcclxuICAgIH1cclxuXHJcbiAgICAuc3BlZWNoX19idXR0b24ge1xyXG4gICAgICAgIHJpZ2h0OiA1NXB4O1xyXG4gICAgICAgIGJvdHRvbTogNTBweDtcclxuICAgICAgICBpbWcge1xyXG4gICAgICAgICAgICBoZWlnaHQ6IGF1dG87XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5AbWVkaWEgKG1pbi13aWR0aDogJGJyZWFrLWxnKSB7XHJcbiAgICAuc3BlZWNoX19kaWFsb2d1ZSB7XHJcbiAgICAgICAgcGFkZGluZy10b3A6IDcuNXJlbTtcclxuICAgICAgICBmb250LXNpemU6IDMuNXJlbTtcclxuICAgIH1cclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9zYXNzL3NyYy9zYXNzL3BhcnRpYWxzL19zcGVlY2gtYnViYmxlLnNjc3MiLCIudmlzdWFsbHktaGlkZGVuIHsgLyogaHR0cHM6Ly9zbm9vay5jYS9hcmNoaXZlcy9odG1sX2FuZF9jc3MvaGlkaW5nLWNvbnRlbnQtZm9yLWFjY2Vzc2liaWxpdHkgKi9cclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZSAhaW1wb3J0YW50O1xyXG4gICAgaGVpZ2h0OiAxcHg7IHdpZHRoOiAxcHg7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgY2xpcDogcmVjdCgxcHgsIDFweCwgMXB4LCAxcHgpO1xyXG59XHJcblxyXG4udG9wLW1hcmdpbi14bCB7XHJcbiAgICBtYXJnaW4tdG9wOiA4cmVtO1xyXG59XHJcblxyXG4udG9wLW1hcmdpbi1sZyB7XHJcbiAgICBtYXJnaW4tdG9wOiAoJGVsLXNwYWNpbmcgKiAyKTtcclxufVxyXG5cclxuLnRvcC1tYXJnaW4ge1xyXG4gICAgbWFyZ2luLXRvcDogJGVsLXNwYWNpbmc7XHJcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2Fzcy9zcmMvc2Fzcy9wYXJ0aWFscy9fdXRpbGl0eS5zY3NzIl0sInNvdXJjZVJvb3QiOiIifQ==*/